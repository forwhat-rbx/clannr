
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model XpLog
 * 
 */
export type XpLog = $Result.DefaultSelection<Prisma.$XpLogPayload>
/**
 * Model UserLink
 * 
 */
export type UserLink = $Result.DefaultSelection<Prisma.$UserLinkPayload>
/**
 * Model RoleBind
 * 
 */
export type RoleBind = $Result.DefaultSelection<Prisma.$RoleBindPayload>
/**
 * Model GuildConfig
 * 
 */
export type GuildConfig = $Result.DefaultSelection<Prisma.$GuildConfigPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.xpLog`: Exposes CRUD operations for the **XpLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more XpLogs
    * const xpLogs = await prisma.xpLog.findMany()
    * ```
    */
  get xpLog(): Prisma.XpLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userLink`: Exposes CRUD operations for the **UserLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLinks
    * const userLinks = await prisma.userLink.findMany()
    * ```
    */
  get userLink(): Prisma.UserLinkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roleBind`: Exposes CRUD operations for the **RoleBind** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoleBinds
    * const roleBinds = await prisma.roleBind.findMany()
    * ```
    */
  get roleBind(): Prisma.RoleBindDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.guildConfig`: Exposes CRUD operations for the **GuildConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GuildConfigs
    * const guildConfigs = await prisma.guildConfig.findMany()
    * ```
    */
  get guildConfig(): Prisma.GuildConfigDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    XpLog: 'XpLog',
    UserLink: 'UserLink',
    RoleBind: 'RoleBind',
    GuildConfig: 'GuildConfig'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "xpLog" | "userLink" | "roleBind" | "guildConfig"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      XpLog: {
        payload: Prisma.$XpLogPayload<ExtArgs>
        fields: Prisma.XpLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.XpLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.XpLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload>
          }
          findFirst: {
            args: Prisma.XpLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.XpLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload>
          }
          findMany: {
            args: Prisma.XpLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload>[]
          }
          create: {
            args: Prisma.XpLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload>
          }
          createMany: {
            args: Prisma.XpLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.XpLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload>[]
          }
          delete: {
            args: Prisma.XpLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload>
          }
          update: {
            args: Prisma.XpLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload>
          }
          deleteMany: {
            args: Prisma.XpLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.XpLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.XpLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload>[]
          }
          upsert: {
            args: Prisma.XpLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XpLogPayload>
          }
          aggregate: {
            args: Prisma.XpLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateXpLog>
          }
          groupBy: {
            args: Prisma.XpLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<XpLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.XpLogCountArgs<ExtArgs>
            result: $Utils.Optional<XpLogCountAggregateOutputType> | number
          }
        }
      }
      UserLink: {
        payload: Prisma.$UserLinkPayload<ExtArgs>
        fields: Prisma.UserLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload>
          }
          findFirst: {
            args: Prisma.UserLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload>
          }
          findMany: {
            args: Prisma.UserLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload>[]
          }
          create: {
            args: Prisma.UserLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload>
          }
          createMany: {
            args: Prisma.UserLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload>[]
          }
          delete: {
            args: Prisma.UserLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload>
          }
          update: {
            args: Prisma.UserLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload>
          }
          deleteMany: {
            args: Prisma.UserLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserLinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload>[]
          }
          upsert: {
            args: Prisma.UserLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLinkPayload>
          }
          aggregate: {
            args: Prisma.UserLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLink>
          }
          groupBy: {
            args: Prisma.UserLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLinkCountArgs<ExtArgs>
            result: $Utils.Optional<UserLinkCountAggregateOutputType> | number
          }
        }
      }
      RoleBind: {
        payload: Prisma.$RoleBindPayload<ExtArgs>
        fields: Prisma.RoleBindFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleBindFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleBindFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload>
          }
          findFirst: {
            args: Prisma.RoleBindFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleBindFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload>
          }
          findMany: {
            args: Prisma.RoleBindFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload>[]
          }
          create: {
            args: Prisma.RoleBindCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload>
          }
          createMany: {
            args: Prisma.RoleBindCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleBindCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload>[]
          }
          delete: {
            args: Prisma.RoleBindDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload>
          }
          update: {
            args: Prisma.RoleBindUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload>
          }
          deleteMany: {
            args: Prisma.RoleBindDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleBindUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleBindUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload>[]
          }
          upsert: {
            args: Prisma.RoleBindUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleBindPayload>
          }
          aggregate: {
            args: Prisma.RoleBindAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoleBind>
          }
          groupBy: {
            args: Prisma.RoleBindGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleBindGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleBindCountArgs<ExtArgs>
            result: $Utils.Optional<RoleBindCountAggregateOutputType> | number
          }
        }
      }
      GuildConfig: {
        payload: Prisma.$GuildConfigPayload<ExtArgs>
        fields: Prisma.GuildConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuildConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuildConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload>
          }
          findFirst: {
            args: Prisma.GuildConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuildConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload>
          }
          findMany: {
            args: Prisma.GuildConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload>[]
          }
          create: {
            args: Prisma.GuildConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload>
          }
          createMany: {
            args: Prisma.GuildConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GuildConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload>[]
          }
          delete: {
            args: Prisma.GuildConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload>
          }
          update: {
            args: Prisma.GuildConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload>
          }
          deleteMany: {
            args: Prisma.GuildConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GuildConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GuildConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload>[]
          }
          upsert: {
            args: Prisma.GuildConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuildConfigPayload>
          }
          aggregate: {
            args: Prisma.GuildConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGuildConfig>
          }
          groupBy: {
            args: Prisma.GuildConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<GuildConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuildConfigCountArgs<ExtArgs>
            result: $Utils.Optional<GuildConfigCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    xpLog?: XpLogOmit
    userLink?: UserLinkOmit
    roleBind?: RoleBindOmit
    guildConfig?: GuildConfigOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    xpLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    xpLogs?: boolean | UserCountOutputTypeCountXpLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountXpLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: XpLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    xp: number | null
    raids: number | null
    defenses: number | null
    scrims: number | null
    trainings: number | null
    unsuspendRank: number | null
  }

  export type UserSumAggregateOutputType = {
    xp: number | null
    raids: number | null
    defenses: number | null
    scrims: number | null
    trainings: number | null
    unsuspendRank: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    robloxId: string | null
    xp: number | null
    raids: number | null
    defenses: number | null
    scrims: number | null
    trainings: number | null
    suspendedUntil: Date | null
    unsuspendRank: number | null
    isBanned: boolean | null
    lastRaid: Date | null
    lastDefense: Date | null
    lastScrim: Date | null
    lastTraining: Date | null
    lastActivity: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    robloxId: string | null
    xp: number | null
    raids: number | null
    defenses: number | null
    scrims: number | null
    trainings: number | null
    suspendedUntil: Date | null
    unsuspendRank: number | null
    isBanned: boolean | null
    lastRaid: Date | null
    lastDefense: Date | null
    lastScrim: Date | null
    lastTraining: Date | null
    lastActivity: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    robloxId: number
    xp: number
    raids: number
    defenses: number
    scrims: number
    trainings: number
    suspendedUntil: number
    unsuspendRank: number
    isBanned: number
    lastRaid: number
    lastDefense: number
    lastScrim: number
    lastTraining: number
    lastActivity: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    xp?: true
    raids?: true
    defenses?: true
    scrims?: true
    trainings?: true
    unsuspendRank?: true
  }

  export type UserSumAggregateInputType = {
    xp?: true
    raids?: true
    defenses?: true
    scrims?: true
    trainings?: true
    unsuspendRank?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    robloxId?: true
    xp?: true
    raids?: true
    defenses?: true
    scrims?: true
    trainings?: true
    suspendedUntil?: true
    unsuspendRank?: true
    isBanned?: true
    lastRaid?: true
    lastDefense?: true
    lastScrim?: true
    lastTraining?: true
    lastActivity?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    robloxId?: true
    xp?: true
    raids?: true
    defenses?: true
    scrims?: true
    trainings?: true
    suspendedUntil?: true
    unsuspendRank?: true
    isBanned?: true
    lastRaid?: true
    lastDefense?: true
    lastScrim?: true
    lastTraining?: true
    lastActivity?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    robloxId?: true
    xp?: true
    raids?: true
    defenses?: true
    scrims?: true
    trainings?: true
    suspendedUntil?: true
    unsuspendRank?: true
    isBanned?: true
    lastRaid?: true
    lastDefense?: true
    lastScrim?: true
    lastTraining?: true
    lastActivity?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    robloxId: string
    xp: number
    raids: number
    defenses: number
    scrims: number
    trainings: number
    suspendedUntil: Date | null
    unsuspendRank: number | null
    isBanned: boolean
    lastRaid: Date | null
    lastDefense: Date | null
    lastScrim: Date | null
    lastTraining: Date | null
    lastActivity: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    robloxId?: boolean
    xp?: boolean
    raids?: boolean
    defenses?: boolean
    scrims?: boolean
    trainings?: boolean
    suspendedUntil?: boolean
    unsuspendRank?: boolean
    isBanned?: boolean
    lastRaid?: boolean
    lastDefense?: boolean
    lastScrim?: boolean
    lastTraining?: boolean
    lastActivity?: boolean
    xpLogs?: boolean | User$xpLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    robloxId?: boolean
    xp?: boolean
    raids?: boolean
    defenses?: boolean
    scrims?: boolean
    trainings?: boolean
    suspendedUntil?: boolean
    unsuspendRank?: boolean
    isBanned?: boolean
    lastRaid?: boolean
    lastDefense?: boolean
    lastScrim?: boolean
    lastTraining?: boolean
    lastActivity?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    robloxId?: boolean
    xp?: boolean
    raids?: boolean
    defenses?: boolean
    scrims?: boolean
    trainings?: boolean
    suspendedUntil?: boolean
    unsuspendRank?: boolean
    isBanned?: boolean
    lastRaid?: boolean
    lastDefense?: boolean
    lastScrim?: boolean
    lastTraining?: boolean
    lastActivity?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    robloxId?: boolean
    xp?: boolean
    raids?: boolean
    defenses?: boolean
    scrims?: boolean
    trainings?: boolean
    suspendedUntil?: boolean
    unsuspendRank?: boolean
    isBanned?: boolean
    lastRaid?: boolean
    lastDefense?: boolean
    lastScrim?: boolean
    lastTraining?: boolean
    lastActivity?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "robloxId" | "xp" | "raids" | "defenses" | "scrims" | "trainings" | "suspendedUntil" | "unsuspendRank" | "isBanned" | "lastRaid" | "lastDefense" | "lastScrim" | "lastTraining" | "lastActivity", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    xpLogs?: boolean | User$xpLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      xpLogs: Prisma.$XpLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      robloxId: string
      xp: number
      raids: number
      defenses: number
      scrims: number
      trainings: number
      suspendedUntil: Date | null
      unsuspendRank: number | null
      isBanned: boolean
      lastRaid: Date | null
      lastDefense: Date | null
      lastScrim: Date | null
      lastTraining: Date | null
      lastActivity: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    xpLogs<T extends User$xpLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$xpLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly robloxId: FieldRef<"User", 'String'>
    readonly xp: FieldRef<"User", 'Int'>
    readonly raids: FieldRef<"User", 'Int'>
    readonly defenses: FieldRef<"User", 'Int'>
    readonly scrims: FieldRef<"User", 'Int'>
    readonly trainings: FieldRef<"User", 'Int'>
    readonly suspendedUntil: FieldRef<"User", 'DateTime'>
    readonly unsuspendRank: FieldRef<"User", 'Int'>
    readonly isBanned: FieldRef<"User", 'Boolean'>
    readonly lastRaid: FieldRef<"User", 'DateTime'>
    readonly lastDefense: FieldRef<"User", 'DateTime'>
    readonly lastScrim: FieldRef<"User", 'DateTime'>
    readonly lastTraining: FieldRef<"User", 'DateTime'>
    readonly lastActivity: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.xpLogs
   */
  export type User$xpLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
    where?: XpLogWhereInput
    orderBy?: XpLogOrderByWithRelationInput | XpLogOrderByWithRelationInput[]
    cursor?: XpLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: XpLogScalarFieldEnum | XpLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model XpLog
   */

  export type AggregateXpLog = {
    _count: XpLogCountAggregateOutputType | null
    _avg: XpLogAvgAggregateOutputType | null
    _sum: XpLogSumAggregateOutputType | null
    _min: XpLogMinAggregateOutputType | null
    _max: XpLogMaxAggregateOutputType | null
  }

  export type XpLogAvgAggregateOutputType = {
    amount: number | null
  }

  export type XpLogSumAggregateOutputType = {
    amount: number | null
  }

  export type XpLogMinAggregateOutputType = {
    id: string | null
    robloxId: string | null
    amount: number | null
    reason: string | null
    timestamp: Date | null
  }

  export type XpLogMaxAggregateOutputType = {
    id: string | null
    robloxId: string | null
    amount: number | null
    reason: string | null
    timestamp: Date | null
  }

  export type XpLogCountAggregateOutputType = {
    id: number
    robloxId: number
    amount: number
    reason: number
    timestamp: number
    _all: number
  }


  export type XpLogAvgAggregateInputType = {
    amount?: true
  }

  export type XpLogSumAggregateInputType = {
    amount?: true
  }

  export type XpLogMinAggregateInputType = {
    id?: true
    robloxId?: true
    amount?: true
    reason?: true
    timestamp?: true
  }

  export type XpLogMaxAggregateInputType = {
    id?: true
    robloxId?: true
    amount?: true
    reason?: true
    timestamp?: true
  }

  export type XpLogCountAggregateInputType = {
    id?: true
    robloxId?: true
    amount?: true
    reason?: true
    timestamp?: true
    _all?: true
  }

  export type XpLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which XpLog to aggregate.
     */
    where?: XpLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XpLogs to fetch.
     */
    orderBy?: XpLogOrderByWithRelationInput | XpLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: XpLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XpLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XpLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned XpLogs
    **/
    _count?: true | XpLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: XpLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: XpLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: XpLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: XpLogMaxAggregateInputType
  }

  export type GetXpLogAggregateType<T extends XpLogAggregateArgs> = {
        [P in keyof T & keyof AggregateXpLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateXpLog[P]>
      : GetScalarType<T[P], AggregateXpLog[P]>
  }




  export type XpLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: XpLogWhereInput
    orderBy?: XpLogOrderByWithAggregationInput | XpLogOrderByWithAggregationInput[]
    by: XpLogScalarFieldEnum[] | XpLogScalarFieldEnum
    having?: XpLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: XpLogCountAggregateInputType | true
    _avg?: XpLogAvgAggregateInputType
    _sum?: XpLogSumAggregateInputType
    _min?: XpLogMinAggregateInputType
    _max?: XpLogMaxAggregateInputType
  }

  export type XpLogGroupByOutputType = {
    id: string
    robloxId: string
    amount: number
    reason: string | null
    timestamp: Date
    _count: XpLogCountAggregateOutputType | null
    _avg: XpLogAvgAggregateOutputType | null
    _sum: XpLogSumAggregateOutputType | null
    _min: XpLogMinAggregateOutputType | null
    _max: XpLogMaxAggregateOutputType | null
  }

  type GetXpLogGroupByPayload<T extends XpLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<XpLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof XpLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], XpLogGroupByOutputType[P]>
            : GetScalarType<T[P], XpLogGroupByOutputType[P]>
        }
      >
    >


  export type XpLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    robloxId?: boolean
    amount?: boolean
    reason?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xpLog"]>

  export type XpLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    robloxId?: boolean
    amount?: boolean
    reason?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xpLog"]>

  export type XpLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    robloxId?: boolean
    amount?: boolean
    reason?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xpLog"]>

  export type XpLogSelectScalar = {
    id?: boolean
    robloxId?: boolean
    amount?: boolean
    reason?: boolean
    timestamp?: boolean
  }

  export type XpLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "robloxId" | "amount" | "reason" | "timestamp", ExtArgs["result"]["xpLog"]>
  export type XpLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type XpLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type XpLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $XpLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "XpLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      robloxId: string
      amount: number
      reason: string | null
      timestamp: Date
    }, ExtArgs["result"]["xpLog"]>
    composites: {}
  }

  type XpLogGetPayload<S extends boolean | null | undefined | XpLogDefaultArgs> = $Result.GetResult<Prisma.$XpLogPayload, S>

  type XpLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<XpLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: XpLogCountAggregateInputType | true
    }

  export interface XpLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['XpLog'], meta: { name: 'XpLog' } }
    /**
     * Find zero or one XpLog that matches the filter.
     * @param {XpLogFindUniqueArgs} args - Arguments to find a XpLog
     * @example
     * // Get one XpLog
     * const xpLog = await prisma.xpLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends XpLogFindUniqueArgs>(args: SelectSubset<T, XpLogFindUniqueArgs<ExtArgs>>): Prisma__XpLogClient<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one XpLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {XpLogFindUniqueOrThrowArgs} args - Arguments to find a XpLog
     * @example
     * // Get one XpLog
     * const xpLog = await prisma.xpLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends XpLogFindUniqueOrThrowArgs>(args: SelectSubset<T, XpLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__XpLogClient<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first XpLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpLogFindFirstArgs} args - Arguments to find a XpLog
     * @example
     * // Get one XpLog
     * const xpLog = await prisma.xpLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends XpLogFindFirstArgs>(args?: SelectSubset<T, XpLogFindFirstArgs<ExtArgs>>): Prisma__XpLogClient<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first XpLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpLogFindFirstOrThrowArgs} args - Arguments to find a XpLog
     * @example
     * // Get one XpLog
     * const xpLog = await prisma.xpLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends XpLogFindFirstOrThrowArgs>(args?: SelectSubset<T, XpLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__XpLogClient<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more XpLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all XpLogs
     * const xpLogs = await prisma.xpLog.findMany()
     * 
     * // Get first 10 XpLogs
     * const xpLogs = await prisma.xpLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const xpLogWithIdOnly = await prisma.xpLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends XpLogFindManyArgs>(args?: SelectSubset<T, XpLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a XpLog.
     * @param {XpLogCreateArgs} args - Arguments to create a XpLog.
     * @example
     * // Create one XpLog
     * const XpLog = await prisma.xpLog.create({
     *   data: {
     *     // ... data to create a XpLog
     *   }
     * })
     * 
     */
    create<T extends XpLogCreateArgs>(args: SelectSubset<T, XpLogCreateArgs<ExtArgs>>): Prisma__XpLogClient<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many XpLogs.
     * @param {XpLogCreateManyArgs} args - Arguments to create many XpLogs.
     * @example
     * // Create many XpLogs
     * const xpLog = await prisma.xpLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends XpLogCreateManyArgs>(args?: SelectSubset<T, XpLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many XpLogs and returns the data saved in the database.
     * @param {XpLogCreateManyAndReturnArgs} args - Arguments to create many XpLogs.
     * @example
     * // Create many XpLogs
     * const xpLog = await prisma.xpLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many XpLogs and only return the `id`
     * const xpLogWithIdOnly = await prisma.xpLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends XpLogCreateManyAndReturnArgs>(args?: SelectSubset<T, XpLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a XpLog.
     * @param {XpLogDeleteArgs} args - Arguments to delete one XpLog.
     * @example
     * // Delete one XpLog
     * const XpLog = await prisma.xpLog.delete({
     *   where: {
     *     // ... filter to delete one XpLog
     *   }
     * })
     * 
     */
    delete<T extends XpLogDeleteArgs>(args: SelectSubset<T, XpLogDeleteArgs<ExtArgs>>): Prisma__XpLogClient<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one XpLog.
     * @param {XpLogUpdateArgs} args - Arguments to update one XpLog.
     * @example
     * // Update one XpLog
     * const xpLog = await prisma.xpLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends XpLogUpdateArgs>(args: SelectSubset<T, XpLogUpdateArgs<ExtArgs>>): Prisma__XpLogClient<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more XpLogs.
     * @param {XpLogDeleteManyArgs} args - Arguments to filter XpLogs to delete.
     * @example
     * // Delete a few XpLogs
     * const { count } = await prisma.xpLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends XpLogDeleteManyArgs>(args?: SelectSubset<T, XpLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more XpLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many XpLogs
     * const xpLog = await prisma.xpLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends XpLogUpdateManyArgs>(args: SelectSubset<T, XpLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more XpLogs and returns the data updated in the database.
     * @param {XpLogUpdateManyAndReturnArgs} args - Arguments to update many XpLogs.
     * @example
     * // Update many XpLogs
     * const xpLog = await prisma.xpLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more XpLogs and only return the `id`
     * const xpLogWithIdOnly = await prisma.xpLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends XpLogUpdateManyAndReturnArgs>(args: SelectSubset<T, XpLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one XpLog.
     * @param {XpLogUpsertArgs} args - Arguments to update or create a XpLog.
     * @example
     * // Update or create a XpLog
     * const xpLog = await prisma.xpLog.upsert({
     *   create: {
     *     // ... data to create a XpLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the XpLog we want to update
     *   }
     * })
     */
    upsert<T extends XpLogUpsertArgs>(args: SelectSubset<T, XpLogUpsertArgs<ExtArgs>>): Prisma__XpLogClient<$Result.GetResult<Prisma.$XpLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of XpLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpLogCountArgs} args - Arguments to filter XpLogs to count.
     * @example
     * // Count the number of XpLogs
     * const count = await prisma.xpLog.count({
     *   where: {
     *     // ... the filter for the XpLogs we want to count
     *   }
     * })
    **/
    count<T extends XpLogCountArgs>(
      args?: Subset<T, XpLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], XpLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a XpLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends XpLogAggregateArgs>(args: Subset<T, XpLogAggregateArgs>): Prisma.PrismaPromise<GetXpLogAggregateType<T>>

    /**
     * Group by XpLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XpLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends XpLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: XpLogGroupByArgs['orderBy'] }
        : { orderBy?: XpLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, XpLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetXpLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the XpLog model
   */
  readonly fields: XpLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for XpLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__XpLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the XpLog model
   */
  interface XpLogFieldRefs {
    readonly id: FieldRef<"XpLog", 'String'>
    readonly robloxId: FieldRef<"XpLog", 'String'>
    readonly amount: FieldRef<"XpLog", 'Int'>
    readonly reason: FieldRef<"XpLog", 'String'>
    readonly timestamp: FieldRef<"XpLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * XpLog findUnique
   */
  export type XpLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
    /**
     * Filter, which XpLog to fetch.
     */
    where: XpLogWhereUniqueInput
  }

  /**
   * XpLog findUniqueOrThrow
   */
  export type XpLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
    /**
     * Filter, which XpLog to fetch.
     */
    where: XpLogWhereUniqueInput
  }

  /**
   * XpLog findFirst
   */
  export type XpLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
    /**
     * Filter, which XpLog to fetch.
     */
    where?: XpLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XpLogs to fetch.
     */
    orderBy?: XpLogOrderByWithRelationInput | XpLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for XpLogs.
     */
    cursor?: XpLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XpLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XpLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of XpLogs.
     */
    distinct?: XpLogScalarFieldEnum | XpLogScalarFieldEnum[]
  }

  /**
   * XpLog findFirstOrThrow
   */
  export type XpLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
    /**
     * Filter, which XpLog to fetch.
     */
    where?: XpLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XpLogs to fetch.
     */
    orderBy?: XpLogOrderByWithRelationInput | XpLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for XpLogs.
     */
    cursor?: XpLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XpLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XpLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of XpLogs.
     */
    distinct?: XpLogScalarFieldEnum | XpLogScalarFieldEnum[]
  }

  /**
   * XpLog findMany
   */
  export type XpLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
    /**
     * Filter, which XpLogs to fetch.
     */
    where?: XpLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XpLogs to fetch.
     */
    orderBy?: XpLogOrderByWithRelationInput | XpLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing XpLogs.
     */
    cursor?: XpLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XpLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XpLogs.
     */
    skip?: number
    distinct?: XpLogScalarFieldEnum | XpLogScalarFieldEnum[]
  }

  /**
   * XpLog create
   */
  export type XpLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
    /**
     * The data needed to create a XpLog.
     */
    data: XOR<XpLogCreateInput, XpLogUncheckedCreateInput>
  }

  /**
   * XpLog createMany
   */
  export type XpLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many XpLogs.
     */
    data: XpLogCreateManyInput | XpLogCreateManyInput[]
  }

  /**
   * XpLog createManyAndReturn
   */
  export type XpLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * The data used to create many XpLogs.
     */
    data: XpLogCreateManyInput | XpLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * XpLog update
   */
  export type XpLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
    /**
     * The data needed to update a XpLog.
     */
    data: XOR<XpLogUpdateInput, XpLogUncheckedUpdateInput>
    /**
     * Choose, which XpLog to update.
     */
    where: XpLogWhereUniqueInput
  }

  /**
   * XpLog updateMany
   */
  export type XpLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update XpLogs.
     */
    data: XOR<XpLogUpdateManyMutationInput, XpLogUncheckedUpdateManyInput>
    /**
     * Filter which XpLogs to update
     */
    where?: XpLogWhereInput
    /**
     * Limit how many XpLogs to update.
     */
    limit?: number
  }

  /**
   * XpLog updateManyAndReturn
   */
  export type XpLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * The data used to update XpLogs.
     */
    data: XOR<XpLogUpdateManyMutationInput, XpLogUncheckedUpdateManyInput>
    /**
     * Filter which XpLogs to update
     */
    where?: XpLogWhereInput
    /**
     * Limit how many XpLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * XpLog upsert
   */
  export type XpLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
    /**
     * The filter to search for the XpLog to update in case it exists.
     */
    where: XpLogWhereUniqueInput
    /**
     * In case the XpLog found by the `where` argument doesn't exist, create a new XpLog with this data.
     */
    create: XOR<XpLogCreateInput, XpLogUncheckedCreateInput>
    /**
     * In case the XpLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<XpLogUpdateInput, XpLogUncheckedUpdateInput>
  }

  /**
   * XpLog delete
   */
  export type XpLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
    /**
     * Filter which XpLog to delete.
     */
    where: XpLogWhereUniqueInput
  }

  /**
   * XpLog deleteMany
   */
  export type XpLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which XpLogs to delete
     */
    where?: XpLogWhereInput
    /**
     * Limit how many XpLogs to delete.
     */
    limit?: number
  }

  /**
   * XpLog without action
   */
  export type XpLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XpLog
     */
    select?: XpLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XpLog
     */
    omit?: XpLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XpLogInclude<ExtArgs> | null
  }


  /**
   * Model UserLink
   */

  export type AggregateUserLink = {
    _count: UserLinkCountAggregateOutputType | null
    _min: UserLinkMinAggregateOutputType | null
    _max: UserLinkMaxAggregateOutputType | null
  }

  export type UserLinkMinAggregateOutputType = {
    id: string | null
    discordId: string | null
    robloxId: string | null
    verifiedAt: Date | null
  }

  export type UserLinkMaxAggregateOutputType = {
    id: string | null
    discordId: string | null
    robloxId: string | null
    verifiedAt: Date | null
  }

  export type UserLinkCountAggregateOutputType = {
    id: number
    discordId: number
    robloxId: number
    verifiedAt: number
    _all: number
  }


  export type UserLinkMinAggregateInputType = {
    id?: true
    discordId?: true
    robloxId?: true
    verifiedAt?: true
  }

  export type UserLinkMaxAggregateInputType = {
    id?: true
    discordId?: true
    robloxId?: true
    verifiedAt?: true
  }

  export type UserLinkCountAggregateInputType = {
    id?: true
    discordId?: true
    robloxId?: true
    verifiedAt?: true
    _all?: true
  }

  export type UserLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLink to aggregate.
     */
    where?: UserLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLinks to fetch.
     */
    orderBy?: UserLinkOrderByWithRelationInput | UserLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLinks
    **/
    _count?: true | UserLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLinkMaxAggregateInputType
  }

  export type GetUserLinkAggregateType<T extends UserLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLink[P]>
      : GetScalarType<T[P], AggregateUserLink[P]>
  }




  export type UserLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLinkWhereInput
    orderBy?: UserLinkOrderByWithAggregationInput | UserLinkOrderByWithAggregationInput[]
    by: UserLinkScalarFieldEnum[] | UserLinkScalarFieldEnum
    having?: UserLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLinkCountAggregateInputType | true
    _min?: UserLinkMinAggregateInputType
    _max?: UserLinkMaxAggregateInputType
  }

  export type UserLinkGroupByOutputType = {
    id: string
    discordId: string
    robloxId: string
    verifiedAt: Date
    _count: UserLinkCountAggregateOutputType | null
    _min: UserLinkMinAggregateOutputType | null
    _max: UserLinkMaxAggregateOutputType | null
  }

  type GetUserLinkGroupByPayload<T extends UserLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLinkGroupByOutputType[P]>
            : GetScalarType<T[P], UserLinkGroupByOutputType[P]>
        }
      >
    >


  export type UserLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discordId?: boolean
    robloxId?: boolean
    verifiedAt?: boolean
  }, ExtArgs["result"]["userLink"]>

  export type UserLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discordId?: boolean
    robloxId?: boolean
    verifiedAt?: boolean
  }, ExtArgs["result"]["userLink"]>

  export type UserLinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discordId?: boolean
    robloxId?: boolean
    verifiedAt?: boolean
  }, ExtArgs["result"]["userLink"]>

  export type UserLinkSelectScalar = {
    id?: boolean
    discordId?: boolean
    robloxId?: boolean
    verifiedAt?: boolean
  }

  export type UserLinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "discordId" | "robloxId" | "verifiedAt", ExtArgs["result"]["userLink"]>

  export type $UserLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLink"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      discordId: string
      robloxId: string
      verifiedAt: Date
    }, ExtArgs["result"]["userLink"]>
    composites: {}
  }

  type UserLinkGetPayload<S extends boolean | null | undefined | UserLinkDefaultArgs> = $Result.GetResult<Prisma.$UserLinkPayload, S>

  type UserLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserLinkCountAggregateInputType | true
    }

  export interface UserLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLink'], meta: { name: 'UserLink' } }
    /**
     * Find zero or one UserLink that matches the filter.
     * @param {UserLinkFindUniqueArgs} args - Arguments to find a UserLink
     * @example
     * // Get one UserLink
     * const userLink = await prisma.userLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLinkFindUniqueArgs>(args: SelectSubset<T, UserLinkFindUniqueArgs<ExtArgs>>): Prisma__UserLinkClient<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserLinkFindUniqueOrThrowArgs} args - Arguments to find a UserLink
     * @example
     * // Get one UserLink
     * const userLink = await prisma.userLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLinkClient<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLinkFindFirstArgs} args - Arguments to find a UserLink
     * @example
     * // Get one UserLink
     * const userLink = await prisma.userLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLinkFindFirstArgs>(args?: SelectSubset<T, UserLinkFindFirstArgs<ExtArgs>>): Prisma__UserLinkClient<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLinkFindFirstOrThrowArgs} args - Arguments to find a UserLink
     * @example
     * // Get one UserLink
     * const userLink = await prisma.userLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLinkClient<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLinks
     * const userLinks = await prisma.userLink.findMany()
     * 
     * // Get first 10 UserLinks
     * const userLinks = await prisma.userLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userLinkWithIdOnly = await prisma.userLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserLinkFindManyArgs>(args?: SelectSubset<T, UserLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserLink.
     * @param {UserLinkCreateArgs} args - Arguments to create a UserLink.
     * @example
     * // Create one UserLink
     * const UserLink = await prisma.userLink.create({
     *   data: {
     *     // ... data to create a UserLink
     *   }
     * })
     * 
     */
    create<T extends UserLinkCreateArgs>(args: SelectSubset<T, UserLinkCreateArgs<ExtArgs>>): Prisma__UserLinkClient<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserLinks.
     * @param {UserLinkCreateManyArgs} args - Arguments to create many UserLinks.
     * @example
     * // Create many UserLinks
     * const userLink = await prisma.userLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLinkCreateManyArgs>(args?: SelectSubset<T, UserLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserLinks and returns the data saved in the database.
     * @param {UserLinkCreateManyAndReturnArgs} args - Arguments to create many UserLinks.
     * @example
     * // Create many UserLinks
     * const userLink = await prisma.userLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserLinks and only return the `id`
     * const userLinkWithIdOnly = await prisma.userLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, UserLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserLink.
     * @param {UserLinkDeleteArgs} args - Arguments to delete one UserLink.
     * @example
     * // Delete one UserLink
     * const UserLink = await prisma.userLink.delete({
     *   where: {
     *     // ... filter to delete one UserLink
     *   }
     * })
     * 
     */
    delete<T extends UserLinkDeleteArgs>(args: SelectSubset<T, UserLinkDeleteArgs<ExtArgs>>): Prisma__UserLinkClient<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserLink.
     * @param {UserLinkUpdateArgs} args - Arguments to update one UserLink.
     * @example
     * // Update one UserLink
     * const userLink = await prisma.userLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLinkUpdateArgs>(args: SelectSubset<T, UserLinkUpdateArgs<ExtArgs>>): Prisma__UserLinkClient<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserLinks.
     * @param {UserLinkDeleteManyArgs} args - Arguments to filter UserLinks to delete.
     * @example
     * // Delete a few UserLinks
     * const { count } = await prisma.userLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLinkDeleteManyArgs>(args?: SelectSubset<T, UserLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLinks
     * const userLink = await prisma.userLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLinkUpdateManyArgs>(args: SelectSubset<T, UserLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLinks and returns the data updated in the database.
     * @param {UserLinkUpdateManyAndReturnArgs} args - Arguments to update many UserLinks.
     * @example
     * // Update many UserLinks
     * const userLink = await prisma.userLink.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserLinks and only return the `id`
     * const userLinkWithIdOnly = await prisma.userLink.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserLinkUpdateManyAndReturnArgs>(args: SelectSubset<T, UserLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserLink.
     * @param {UserLinkUpsertArgs} args - Arguments to update or create a UserLink.
     * @example
     * // Update or create a UserLink
     * const userLink = await prisma.userLink.upsert({
     *   create: {
     *     // ... data to create a UserLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLink we want to update
     *   }
     * })
     */
    upsert<T extends UserLinkUpsertArgs>(args: SelectSubset<T, UserLinkUpsertArgs<ExtArgs>>): Prisma__UserLinkClient<$Result.GetResult<Prisma.$UserLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLinkCountArgs} args - Arguments to filter UserLinks to count.
     * @example
     * // Count the number of UserLinks
     * const count = await prisma.userLink.count({
     *   where: {
     *     // ... the filter for the UserLinks we want to count
     *   }
     * })
    **/
    count<T extends UserLinkCountArgs>(
      args?: Subset<T, UserLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLinkAggregateArgs>(args: Subset<T, UserLinkAggregateArgs>): Prisma.PrismaPromise<GetUserLinkAggregateType<T>>

    /**
     * Group by UserLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLinkGroupByArgs['orderBy'] }
        : { orderBy?: UserLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLink model
   */
  readonly fields: UserLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLink model
   */
  interface UserLinkFieldRefs {
    readonly id: FieldRef<"UserLink", 'String'>
    readonly discordId: FieldRef<"UserLink", 'String'>
    readonly robloxId: FieldRef<"UserLink", 'String'>
    readonly verifiedAt: FieldRef<"UserLink", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserLink findUnique
   */
  export type UserLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * Filter, which UserLink to fetch.
     */
    where: UserLinkWhereUniqueInput
  }

  /**
   * UserLink findUniqueOrThrow
   */
  export type UserLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * Filter, which UserLink to fetch.
     */
    where: UserLinkWhereUniqueInput
  }

  /**
   * UserLink findFirst
   */
  export type UserLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * Filter, which UserLink to fetch.
     */
    where?: UserLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLinks to fetch.
     */
    orderBy?: UserLinkOrderByWithRelationInput | UserLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLinks.
     */
    cursor?: UserLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLinks.
     */
    distinct?: UserLinkScalarFieldEnum | UserLinkScalarFieldEnum[]
  }

  /**
   * UserLink findFirstOrThrow
   */
  export type UserLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * Filter, which UserLink to fetch.
     */
    where?: UserLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLinks to fetch.
     */
    orderBy?: UserLinkOrderByWithRelationInput | UserLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLinks.
     */
    cursor?: UserLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLinks.
     */
    distinct?: UserLinkScalarFieldEnum | UserLinkScalarFieldEnum[]
  }

  /**
   * UserLink findMany
   */
  export type UserLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * Filter, which UserLinks to fetch.
     */
    where?: UserLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLinks to fetch.
     */
    orderBy?: UserLinkOrderByWithRelationInput | UserLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLinks.
     */
    cursor?: UserLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLinks.
     */
    skip?: number
    distinct?: UserLinkScalarFieldEnum | UserLinkScalarFieldEnum[]
  }

  /**
   * UserLink create
   */
  export type UserLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * The data needed to create a UserLink.
     */
    data: XOR<UserLinkCreateInput, UserLinkUncheckedCreateInput>
  }

  /**
   * UserLink createMany
   */
  export type UserLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLinks.
     */
    data: UserLinkCreateManyInput | UserLinkCreateManyInput[]
  }

  /**
   * UserLink createManyAndReturn
   */
  export type UserLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * The data used to create many UserLinks.
     */
    data: UserLinkCreateManyInput | UserLinkCreateManyInput[]
  }

  /**
   * UserLink update
   */
  export type UserLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * The data needed to update a UserLink.
     */
    data: XOR<UserLinkUpdateInput, UserLinkUncheckedUpdateInput>
    /**
     * Choose, which UserLink to update.
     */
    where: UserLinkWhereUniqueInput
  }

  /**
   * UserLink updateMany
   */
  export type UserLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLinks.
     */
    data: XOR<UserLinkUpdateManyMutationInput, UserLinkUncheckedUpdateManyInput>
    /**
     * Filter which UserLinks to update
     */
    where?: UserLinkWhereInput
    /**
     * Limit how many UserLinks to update.
     */
    limit?: number
  }

  /**
   * UserLink updateManyAndReturn
   */
  export type UserLinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * The data used to update UserLinks.
     */
    data: XOR<UserLinkUpdateManyMutationInput, UserLinkUncheckedUpdateManyInput>
    /**
     * Filter which UserLinks to update
     */
    where?: UserLinkWhereInput
    /**
     * Limit how many UserLinks to update.
     */
    limit?: number
  }

  /**
   * UserLink upsert
   */
  export type UserLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * The filter to search for the UserLink to update in case it exists.
     */
    where: UserLinkWhereUniqueInput
    /**
     * In case the UserLink found by the `where` argument doesn't exist, create a new UserLink with this data.
     */
    create: XOR<UserLinkCreateInput, UserLinkUncheckedCreateInput>
    /**
     * In case the UserLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLinkUpdateInput, UserLinkUncheckedUpdateInput>
  }

  /**
   * UserLink delete
   */
  export type UserLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
    /**
     * Filter which UserLink to delete.
     */
    where: UserLinkWhereUniqueInput
  }

  /**
   * UserLink deleteMany
   */
  export type UserLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLinks to delete
     */
    where?: UserLinkWhereInput
    /**
     * Limit how many UserLinks to delete.
     */
    limit?: number
  }

  /**
   * UserLink without action
   */
  export type UserLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLink
     */
    select?: UserLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLink
     */
    omit?: UserLinkOmit<ExtArgs> | null
  }


  /**
   * Model RoleBind
   */

  export type AggregateRoleBind = {
    _count: RoleBindCountAggregateOutputType | null
    _avg: RoleBindAvgAggregateOutputType | null
    _sum: RoleBindSumAggregateOutputType | null
    _min: RoleBindMinAggregateOutputType | null
    _max: RoleBindMaxAggregateOutputType | null
  }

  export type RoleBindAvgAggregateOutputType = {
    minRankId: number | null
    maxRankId: number | null
  }

  export type RoleBindSumAggregateOutputType = {
    minRankId: number | null
    maxRankId: number | null
  }

  export type RoleBindMinAggregateOutputType = {
    id: string | null
    guildId: string | null
    discordRoleId: string | null
    minRankId: number | null
    maxRankId: number | null
    robloxRankName: string | null
    rolesToRemoveJson: string | null
  }

  export type RoleBindMaxAggregateOutputType = {
    id: string | null
    guildId: string | null
    discordRoleId: string | null
    minRankId: number | null
    maxRankId: number | null
    robloxRankName: string | null
    rolesToRemoveJson: string | null
  }

  export type RoleBindCountAggregateOutputType = {
    id: number
    guildId: number
    discordRoleId: number
    minRankId: number
    maxRankId: number
    robloxRankName: number
    rolesToRemoveJson: number
    _all: number
  }


  export type RoleBindAvgAggregateInputType = {
    minRankId?: true
    maxRankId?: true
  }

  export type RoleBindSumAggregateInputType = {
    minRankId?: true
    maxRankId?: true
  }

  export type RoleBindMinAggregateInputType = {
    id?: true
    guildId?: true
    discordRoleId?: true
    minRankId?: true
    maxRankId?: true
    robloxRankName?: true
    rolesToRemoveJson?: true
  }

  export type RoleBindMaxAggregateInputType = {
    id?: true
    guildId?: true
    discordRoleId?: true
    minRankId?: true
    maxRankId?: true
    robloxRankName?: true
    rolesToRemoveJson?: true
  }

  export type RoleBindCountAggregateInputType = {
    id?: true
    guildId?: true
    discordRoleId?: true
    minRankId?: true
    maxRankId?: true
    robloxRankName?: true
    rolesToRemoveJson?: true
    _all?: true
  }

  export type RoleBindAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoleBind to aggregate.
     */
    where?: RoleBindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleBinds to fetch.
     */
    orderBy?: RoleBindOrderByWithRelationInput | RoleBindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleBindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleBinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleBinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoleBinds
    **/
    _count?: true | RoleBindCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleBindAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleBindSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleBindMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleBindMaxAggregateInputType
  }

  export type GetRoleBindAggregateType<T extends RoleBindAggregateArgs> = {
        [P in keyof T & keyof AggregateRoleBind]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoleBind[P]>
      : GetScalarType<T[P], AggregateRoleBind[P]>
  }




  export type RoleBindGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleBindWhereInput
    orderBy?: RoleBindOrderByWithAggregationInput | RoleBindOrderByWithAggregationInput[]
    by: RoleBindScalarFieldEnum[] | RoleBindScalarFieldEnum
    having?: RoleBindScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleBindCountAggregateInputType | true
    _avg?: RoleBindAvgAggregateInputType
    _sum?: RoleBindSumAggregateInputType
    _min?: RoleBindMinAggregateInputType
    _max?: RoleBindMaxAggregateInputType
  }

  export type RoleBindGroupByOutputType = {
    id: string
    guildId: string
    discordRoleId: string
    minRankId: number
    maxRankId: number
    robloxRankName: string
    rolesToRemoveJson: string | null
    _count: RoleBindCountAggregateOutputType | null
    _avg: RoleBindAvgAggregateOutputType | null
    _sum: RoleBindSumAggregateOutputType | null
    _min: RoleBindMinAggregateOutputType | null
    _max: RoleBindMaxAggregateOutputType | null
  }

  type GetRoleBindGroupByPayload<T extends RoleBindGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleBindGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleBindGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleBindGroupByOutputType[P]>
            : GetScalarType<T[P], RoleBindGroupByOutputType[P]>
        }
      >
    >


  export type RoleBindSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    discordRoleId?: boolean
    minRankId?: boolean
    maxRankId?: boolean
    robloxRankName?: boolean
    rolesToRemoveJson?: boolean
  }, ExtArgs["result"]["roleBind"]>

  export type RoleBindSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    discordRoleId?: boolean
    minRankId?: boolean
    maxRankId?: boolean
    robloxRankName?: boolean
    rolesToRemoveJson?: boolean
  }, ExtArgs["result"]["roleBind"]>

  export type RoleBindSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    discordRoleId?: boolean
    minRankId?: boolean
    maxRankId?: boolean
    robloxRankName?: boolean
    rolesToRemoveJson?: boolean
  }, ExtArgs["result"]["roleBind"]>

  export type RoleBindSelectScalar = {
    id?: boolean
    guildId?: boolean
    discordRoleId?: boolean
    minRankId?: boolean
    maxRankId?: boolean
    robloxRankName?: boolean
    rolesToRemoveJson?: boolean
  }

  export type RoleBindOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "guildId" | "discordRoleId" | "minRankId" | "maxRankId" | "robloxRankName" | "rolesToRemoveJson", ExtArgs["result"]["roleBind"]>

  export type $RoleBindPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoleBind"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      guildId: string
      discordRoleId: string
      minRankId: number
      maxRankId: number
      robloxRankName: string
      rolesToRemoveJson: string | null
    }, ExtArgs["result"]["roleBind"]>
    composites: {}
  }

  type RoleBindGetPayload<S extends boolean | null | undefined | RoleBindDefaultArgs> = $Result.GetResult<Prisma.$RoleBindPayload, S>

  type RoleBindCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleBindFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleBindCountAggregateInputType | true
    }

  export interface RoleBindDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoleBind'], meta: { name: 'RoleBind' } }
    /**
     * Find zero or one RoleBind that matches the filter.
     * @param {RoleBindFindUniqueArgs} args - Arguments to find a RoleBind
     * @example
     * // Get one RoleBind
     * const roleBind = await prisma.roleBind.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleBindFindUniqueArgs>(args: SelectSubset<T, RoleBindFindUniqueArgs<ExtArgs>>): Prisma__RoleBindClient<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoleBind that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleBindFindUniqueOrThrowArgs} args - Arguments to find a RoleBind
     * @example
     * // Get one RoleBind
     * const roleBind = await prisma.roleBind.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleBindFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleBindFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleBindClient<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoleBind that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleBindFindFirstArgs} args - Arguments to find a RoleBind
     * @example
     * // Get one RoleBind
     * const roleBind = await prisma.roleBind.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleBindFindFirstArgs>(args?: SelectSubset<T, RoleBindFindFirstArgs<ExtArgs>>): Prisma__RoleBindClient<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoleBind that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleBindFindFirstOrThrowArgs} args - Arguments to find a RoleBind
     * @example
     * // Get one RoleBind
     * const roleBind = await prisma.roleBind.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleBindFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleBindFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleBindClient<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoleBinds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleBindFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoleBinds
     * const roleBinds = await prisma.roleBind.findMany()
     * 
     * // Get first 10 RoleBinds
     * const roleBinds = await prisma.roleBind.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleBindWithIdOnly = await prisma.roleBind.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleBindFindManyArgs>(args?: SelectSubset<T, RoleBindFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoleBind.
     * @param {RoleBindCreateArgs} args - Arguments to create a RoleBind.
     * @example
     * // Create one RoleBind
     * const RoleBind = await prisma.roleBind.create({
     *   data: {
     *     // ... data to create a RoleBind
     *   }
     * })
     * 
     */
    create<T extends RoleBindCreateArgs>(args: SelectSubset<T, RoleBindCreateArgs<ExtArgs>>): Prisma__RoleBindClient<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoleBinds.
     * @param {RoleBindCreateManyArgs} args - Arguments to create many RoleBinds.
     * @example
     * // Create many RoleBinds
     * const roleBind = await prisma.roleBind.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleBindCreateManyArgs>(args?: SelectSubset<T, RoleBindCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoleBinds and returns the data saved in the database.
     * @param {RoleBindCreateManyAndReturnArgs} args - Arguments to create many RoleBinds.
     * @example
     * // Create many RoleBinds
     * const roleBind = await prisma.roleBind.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoleBinds and only return the `id`
     * const roleBindWithIdOnly = await prisma.roleBind.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleBindCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleBindCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoleBind.
     * @param {RoleBindDeleteArgs} args - Arguments to delete one RoleBind.
     * @example
     * // Delete one RoleBind
     * const RoleBind = await prisma.roleBind.delete({
     *   where: {
     *     // ... filter to delete one RoleBind
     *   }
     * })
     * 
     */
    delete<T extends RoleBindDeleteArgs>(args: SelectSubset<T, RoleBindDeleteArgs<ExtArgs>>): Prisma__RoleBindClient<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoleBind.
     * @param {RoleBindUpdateArgs} args - Arguments to update one RoleBind.
     * @example
     * // Update one RoleBind
     * const roleBind = await prisma.roleBind.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleBindUpdateArgs>(args: SelectSubset<T, RoleBindUpdateArgs<ExtArgs>>): Prisma__RoleBindClient<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoleBinds.
     * @param {RoleBindDeleteManyArgs} args - Arguments to filter RoleBinds to delete.
     * @example
     * // Delete a few RoleBinds
     * const { count } = await prisma.roleBind.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleBindDeleteManyArgs>(args?: SelectSubset<T, RoleBindDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoleBinds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleBindUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoleBinds
     * const roleBind = await prisma.roleBind.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleBindUpdateManyArgs>(args: SelectSubset<T, RoleBindUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoleBinds and returns the data updated in the database.
     * @param {RoleBindUpdateManyAndReturnArgs} args - Arguments to update many RoleBinds.
     * @example
     * // Update many RoleBinds
     * const roleBind = await prisma.roleBind.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoleBinds and only return the `id`
     * const roleBindWithIdOnly = await prisma.roleBind.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleBindUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleBindUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoleBind.
     * @param {RoleBindUpsertArgs} args - Arguments to update or create a RoleBind.
     * @example
     * // Update or create a RoleBind
     * const roleBind = await prisma.roleBind.upsert({
     *   create: {
     *     // ... data to create a RoleBind
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoleBind we want to update
     *   }
     * })
     */
    upsert<T extends RoleBindUpsertArgs>(args: SelectSubset<T, RoleBindUpsertArgs<ExtArgs>>): Prisma__RoleBindClient<$Result.GetResult<Prisma.$RoleBindPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoleBinds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleBindCountArgs} args - Arguments to filter RoleBinds to count.
     * @example
     * // Count the number of RoleBinds
     * const count = await prisma.roleBind.count({
     *   where: {
     *     // ... the filter for the RoleBinds we want to count
     *   }
     * })
    **/
    count<T extends RoleBindCountArgs>(
      args?: Subset<T, RoleBindCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleBindCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoleBind.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleBindAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleBindAggregateArgs>(args: Subset<T, RoleBindAggregateArgs>): Prisma.PrismaPromise<GetRoleBindAggregateType<T>>

    /**
     * Group by RoleBind.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleBindGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleBindGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleBindGroupByArgs['orderBy'] }
        : { orderBy?: RoleBindGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleBindGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleBindGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoleBind model
   */
  readonly fields: RoleBindFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoleBind.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleBindClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoleBind model
   */
  interface RoleBindFieldRefs {
    readonly id: FieldRef<"RoleBind", 'String'>
    readonly guildId: FieldRef<"RoleBind", 'String'>
    readonly discordRoleId: FieldRef<"RoleBind", 'String'>
    readonly minRankId: FieldRef<"RoleBind", 'Int'>
    readonly maxRankId: FieldRef<"RoleBind", 'Int'>
    readonly robloxRankName: FieldRef<"RoleBind", 'String'>
    readonly rolesToRemoveJson: FieldRef<"RoleBind", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RoleBind findUnique
   */
  export type RoleBindFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * Filter, which RoleBind to fetch.
     */
    where: RoleBindWhereUniqueInput
  }

  /**
   * RoleBind findUniqueOrThrow
   */
  export type RoleBindFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * Filter, which RoleBind to fetch.
     */
    where: RoleBindWhereUniqueInput
  }

  /**
   * RoleBind findFirst
   */
  export type RoleBindFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * Filter, which RoleBind to fetch.
     */
    where?: RoleBindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleBinds to fetch.
     */
    orderBy?: RoleBindOrderByWithRelationInput | RoleBindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoleBinds.
     */
    cursor?: RoleBindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleBinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleBinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoleBinds.
     */
    distinct?: RoleBindScalarFieldEnum | RoleBindScalarFieldEnum[]
  }

  /**
   * RoleBind findFirstOrThrow
   */
  export type RoleBindFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * Filter, which RoleBind to fetch.
     */
    where?: RoleBindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleBinds to fetch.
     */
    orderBy?: RoleBindOrderByWithRelationInput | RoleBindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoleBinds.
     */
    cursor?: RoleBindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleBinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleBinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoleBinds.
     */
    distinct?: RoleBindScalarFieldEnum | RoleBindScalarFieldEnum[]
  }

  /**
   * RoleBind findMany
   */
  export type RoleBindFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * Filter, which RoleBinds to fetch.
     */
    where?: RoleBindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleBinds to fetch.
     */
    orderBy?: RoleBindOrderByWithRelationInput | RoleBindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoleBinds.
     */
    cursor?: RoleBindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleBinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleBinds.
     */
    skip?: number
    distinct?: RoleBindScalarFieldEnum | RoleBindScalarFieldEnum[]
  }

  /**
   * RoleBind create
   */
  export type RoleBindCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * The data needed to create a RoleBind.
     */
    data: XOR<RoleBindCreateInput, RoleBindUncheckedCreateInput>
  }

  /**
   * RoleBind createMany
   */
  export type RoleBindCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoleBinds.
     */
    data: RoleBindCreateManyInput | RoleBindCreateManyInput[]
  }

  /**
   * RoleBind createManyAndReturn
   */
  export type RoleBindCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * The data used to create many RoleBinds.
     */
    data: RoleBindCreateManyInput | RoleBindCreateManyInput[]
  }

  /**
   * RoleBind update
   */
  export type RoleBindUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * The data needed to update a RoleBind.
     */
    data: XOR<RoleBindUpdateInput, RoleBindUncheckedUpdateInput>
    /**
     * Choose, which RoleBind to update.
     */
    where: RoleBindWhereUniqueInput
  }

  /**
   * RoleBind updateMany
   */
  export type RoleBindUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoleBinds.
     */
    data: XOR<RoleBindUpdateManyMutationInput, RoleBindUncheckedUpdateManyInput>
    /**
     * Filter which RoleBinds to update
     */
    where?: RoleBindWhereInput
    /**
     * Limit how many RoleBinds to update.
     */
    limit?: number
  }

  /**
   * RoleBind updateManyAndReturn
   */
  export type RoleBindUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * The data used to update RoleBinds.
     */
    data: XOR<RoleBindUpdateManyMutationInput, RoleBindUncheckedUpdateManyInput>
    /**
     * Filter which RoleBinds to update
     */
    where?: RoleBindWhereInput
    /**
     * Limit how many RoleBinds to update.
     */
    limit?: number
  }

  /**
   * RoleBind upsert
   */
  export type RoleBindUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * The filter to search for the RoleBind to update in case it exists.
     */
    where: RoleBindWhereUniqueInput
    /**
     * In case the RoleBind found by the `where` argument doesn't exist, create a new RoleBind with this data.
     */
    create: XOR<RoleBindCreateInput, RoleBindUncheckedCreateInput>
    /**
     * In case the RoleBind was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleBindUpdateInput, RoleBindUncheckedUpdateInput>
  }

  /**
   * RoleBind delete
   */
  export type RoleBindDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
    /**
     * Filter which RoleBind to delete.
     */
    where: RoleBindWhereUniqueInput
  }

  /**
   * RoleBind deleteMany
   */
  export type RoleBindDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoleBinds to delete
     */
    where?: RoleBindWhereInput
    /**
     * Limit how many RoleBinds to delete.
     */
    limit?: number
  }

  /**
   * RoleBind without action
   */
  export type RoleBindDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleBind
     */
    select?: RoleBindSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleBind
     */
    omit?: RoleBindOmit<ExtArgs> | null
  }


  /**
   * Model GuildConfig
   */

  export type AggregateGuildConfig = {
    _count: GuildConfigCountAggregateOutputType | null
    _min: GuildConfigMinAggregateOutputType | null
    _max: GuildConfigMaxAggregateOutputType | null
  }

  export type GuildConfigMinAggregateOutputType = {
    id: string | null
    guildId: string | null
    nicknameFormat: string | null
    verifiedRoleId: string | null
    autoUpdateEnabled: boolean | null
    verificationChannelId: string | null
    verificationMessageId: string | null
  }

  export type GuildConfigMaxAggregateOutputType = {
    id: string | null
    guildId: string | null
    nicknameFormat: string | null
    verifiedRoleId: string | null
    autoUpdateEnabled: boolean | null
    verificationChannelId: string | null
    verificationMessageId: string | null
  }

  export type GuildConfigCountAggregateOutputType = {
    id: number
    guildId: number
    nicknameFormat: number
    verifiedRoleId: number
    autoUpdateEnabled: number
    verificationChannelId: number
    verificationMessageId: number
    _all: number
  }


  export type GuildConfigMinAggregateInputType = {
    id?: true
    guildId?: true
    nicknameFormat?: true
    verifiedRoleId?: true
    autoUpdateEnabled?: true
    verificationChannelId?: true
    verificationMessageId?: true
  }

  export type GuildConfigMaxAggregateInputType = {
    id?: true
    guildId?: true
    nicknameFormat?: true
    verifiedRoleId?: true
    autoUpdateEnabled?: true
    verificationChannelId?: true
    verificationMessageId?: true
  }

  export type GuildConfigCountAggregateInputType = {
    id?: true
    guildId?: true
    nicknameFormat?: true
    verifiedRoleId?: true
    autoUpdateEnabled?: true
    verificationChannelId?: true
    verificationMessageId?: true
    _all?: true
  }

  export type GuildConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GuildConfig to aggregate.
     */
    where?: GuildConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildConfigs to fetch.
     */
    orderBy?: GuildConfigOrderByWithRelationInput | GuildConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuildConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GuildConfigs
    **/
    _count?: true | GuildConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuildConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuildConfigMaxAggregateInputType
  }

  export type GetGuildConfigAggregateType<T extends GuildConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateGuildConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuildConfig[P]>
      : GetScalarType<T[P], AggregateGuildConfig[P]>
  }




  export type GuildConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuildConfigWhereInput
    orderBy?: GuildConfigOrderByWithAggregationInput | GuildConfigOrderByWithAggregationInput[]
    by: GuildConfigScalarFieldEnum[] | GuildConfigScalarFieldEnum
    having?: GuildConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuildConfigCountAggregateInputType | true
    _min?: GuildConfigMinAggregateInputType
    _max?: GuildConfigMaxAggregateInputType
  }

  export type GuildConfigGroupByOutputType = {
    id: string
    guildId: string
    nicknameFormat: string
    verifiedRoleId: string | null
    autoUpdateEnabled: boolean
    verificationChannelId: string | null
    verificationMessageId: string | null
    _count: GuildConfigCountAggregateOutputType | null
    _min: GuildConfigMinAggregateOutputType | null
    _max: GuildConfigMaxAggregateOutputType | null
  }

  type GetGuildConfigGroupByPayload<T extends GuildConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuildConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuildConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuildConfigGroupByOutputType[P]>
            : GetScalarType<T[P], GuildConfigGroupByOutputType[P]>
        }
      >
    >


  export type GuildConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    nicknameFormat?: boolean
    verifiedRoleId?: boolean
    autoUpdateEnabled?: boolean
    verificationChannelId?: boolean
    verificationMessageId?: boolean
  }, ExtArgs["result"]["guildConfig"]>

  export type GuildConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    nicknameFormat?: boolean
    verifiedRoleId?: boolean
    autoUpdateEnabled?: boolean
    verificationChannelId?: boolean
    verificationMessageId?: boolean
  }, ExtArgs["result"]["guildConfig"]>

  export type GuildConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    nicknameFormat?: boolean
    verifiedRoleId?: boolean
    autoUpdateEnabled?: boolean
    verificationChannelId?: boolean
    verificationMessageId?: boolean
  }, ExtArgs["result"]["guildConfig"]>

  export type GuildConfigSelectScalar = {
    id?: boolean
    guildId?: boolean
    nicknameFormat?: boolean
    verifiedRoleId?: boolean
    autoUpdateEnabled?: boolean
    verificationChannelId?: boolean
    verificationMessageId?: boolean
  }

  export type GuildConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "guildId" | "nicknameFormat" | "verifiedRoleId" | "autoUpdateEnabled" | "verificationChannelId" | "verificationMessageId", ExtArgs["result"]["guildConfig"]>

  export type $GuildConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GuildConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      guildId: string
      nicknameFormat: string
      verifiedRoleId: string | null
      autoUpdateEnabled: boolean
      verificationChannelId: string | null
      verificationMessageId: string | null
    }, ExtArgs["result"]["guildConfig"]>
    composites: {}
  }

  type GuildConfigGetPayload<S extends boolean | null | undefined | GuildConfigDefaultArgs> = $Result.GetResult<Prisma.$GuildConfigPayload, S>

  type GuildConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GuildConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GuildConfigCountAggregateInputType | true
    }

  export interface GuildConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GuildConfig'], meta: { name: 'GuildConfig' } }
    /**
     * Find zero or one GuildConfig that matches the filter.
     * @param {GuildConfigFindUniqueArgs} args - Arguments to find a GuildConfig
     * @example
     * // Get one GuildConfig
     * const guildConfig = await prisma.guildConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GuildConfigFindUniqueArgs>(args: SelectSubset<T, GuildConfigFindUniqueArgs<ExtArgs>>): Prisma__GuildConfigClient<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GuildConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GuildConfigFindUniqueOrThrowArgs} args - Arguments to find a GuildConfig
     * @example
     * // Get one GuildConfig
     * const guildConfig = await prisma.guildConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GuildConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, GuildConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GuildConfigClient<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GuildConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigFindFirstArgs} args - Arguments to find a GuildConfig
     * @example
     * // Get one GuildConfig
     * const guildConfig = await prisma.guildConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GuildConfigFindFirstArgs>(args?: SelectSubset<T, GuildConfigFindFirstArgs<ExtArgs>>): Prisma__GuildConfigClient<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GuildConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigFindFirstOrThrowArgs} args - Arguments to find a GuildConfig
     * @example
     * // Get one GuildConfig
     * const guildConfig = await prisma.guildConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GuildConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, GuildConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__GuildConfigClient<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GuildConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GuildConfigs
     * const guildConfigs = await prisma.guildConfig.findMany()
     * 
     * // Get first 10 GuildConfigs
     * const guildConfigs = await prisma.guildConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guildConfigWithIdOnly = await prisma.guildConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GuildConfigFindManyArgs>(args?: SelectSubset<T, GuildConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GuildConfig.
     * @param {GuildConfigCreateArgs} args - Arguments to create a GuildConfig.
     * @example
     * // Create one GuildConfig
     * const GuildConfig = await prisma.guildConfig.create({
     *   data: {
     *     // ... data to create a GuildConfig
     *   }
     * })
     * 
     */
    create<T extends GuildConfigCreateArgs>(args: SelectSubset<T, GuildConfigCreateArgs<ExtArgs>>): Prisma__GuildConfigClient<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GuildConfigs.
     * @param {GuildConfigCreateManyArgs} args - Arguments to create many GuildConfigs.
     * @example
     * // Create many GuildConfigs
     * const guildConfig = await prisma.guildConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GuildConfigCreateManyArgs>(args?: SelectSubset<T, GuildConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GuildConfigs and returns the data saved in the database.
     * @param {GuildConfigCreateManyAndReturnArgs} args - Arguments to create many GuildConfigs.
     * @example
     * // Create many GuildConfigs
     * const guildConfig = await prisma.guildConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GuildConfigs and only return the `id`
     * const guildConfigWithIdOnly = await prisma.guildConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GuildConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, GuildConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GuildConfig.
     * @param {GuildConfigDeleteArgs} args - Arguments to delete one GuildConfig.
     * @example
     * // Delete one GuildConfig
     * const GuildConfig = await prisma.guildConfig.delete({
     *   where: {
     *     // ... filter to delete one GuildConfig
     *   }
     * })
     * 
     */
    delete<T extends GuildConfigDeleteArgs>(args: SelectSubset<T, GuildConfigDeleteArgs<ExtArgs>>): Prisma__GuildConfigClient<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GuildConfig.
     * @param {GuildConfigUpdateArgs} args - Arguments to update one GuildConfig.
     * @example
     * // Update one GuildConfig
     * const guildConfig = await prisma.guildConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GuildConfigUpdateArgs>(args: SelectSubset<T, GuildConfigUpdateArgs<ExtArgs>>): Prisma__GuildConfigClient<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GuildConfigs.
     * @param {GuildConfigDeleteManyArgs} args - Arguments to filter GuildConfigs to delete.
     * @example
     * // Delete a few GuildConfigs
     * const { count } = await prisma.guildConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GuildConfigDeleteManyArgs>(args?: SelectSubset<T, GuildConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GuildConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GuildConfigs
     * const guildConfig = await prisma.guildConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GuildConfigUpdateManyArgs>(args: SelectSubset<T, GuildConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GuildConfigs and returns the data updated in the database.
     * @param {GuildConfigUpdateManyAndReturnArgs} args - Arguments to update many GuildConfigs.
     * @example
     * // Update many GuildConfigs
     * const guildConfig = await prisma.guildConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GuildConfigs and only return the `id`
     * const guildConfigWithIdOnly = await prisma.guildConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GuildConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, GuildConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GuildConfig.
     * @param {GuildConfigUpsertArgs} args - Arguments to update or create a GuildConfig.
     * @example
     * // Update or create a GuildConfig
     * const guildConfig = await prisma.guildConfig.upsert({
     *   create: {
     *     // ... data to create a GuildConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GuildConfig we want to update
     *   }
     * })
     */
    upsert<T extends GuildConfigUpsertArgs>(args: SelectSubset<T, GuildConfigUpsertArgs<ExtArgs>>): Prisma__GuildConfigClient<$Result.GetResult<Prisma.$GuildConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GuildConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigCountArgs} args - Arguments to filter GuildConfigs to count.
     * @example
     * // Count the number of GuildConfigs
     * const count = await prisma.guildConfig.count({
     *   where: {
     *     // ... the filter for the GuildConfigs we want to count
     *   }
     * })
    **/
    count<T extends GuildConfigCountArgs>(
      args?: Subset<T, GuildConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuildConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GuildConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuildConfigAggregateArgs>(args: Subset<T, GuildConfigAggregateArgs>): Prisma.PrismaPromise<GetGuildConfigAggregateType<T>>

    /**
     * Group by GuildConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuildConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuildConfigGroupByArgs['orderBy'] }
        : { orderBy?: GuildConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuildConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuildConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GuildConfig model
   */
  readonly fields: GuildConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GuildConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuildConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GuildConfig model
   */
  interface GuildConfigFieldRefs {
    readonly id: FieldRef<"GuildConfig", 'String'>
    readonly guildId: FieldRef<"GuildConfig", 'String'>
    readonly nicknameFormat: FieldRef<"GuildConfig", 'String'>
    readonly verifiedRoleId: FieldRef<"GuildConfig", 'String'>
    readonly autoUpdateEnabled: FieldRef<"GuildConfig", 'Boolean'>
    readonly verificationChannelId: FieldRef<"GuildConfig", 'String'>
    readonly verificationMessageId: FieldRef<"GuildConfig", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GuildConfig findUnique
   */
  export type GuildConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * Filter, which GuildConfig to fetch.
     */
    where: GuildConfigWhereUniqueInput
  }

  /**
   * GuildConfig findUniqueOrThrow
   */
  export type GuildConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * Filter, which GuildConfig to fetch.
     */
    where: GuildConfigWhereUniqueInput
  }

  /**
   * GuildConfig findFirst
   */
  export type GuildConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * Filter, which GuildConfig to fetch.
     */
    where?: GuildConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildConfigs to fetch.
     */
    orderBy?: GuildConfigOrderByWithRelationInput | GuildConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GuildConfigs.
     */
    cursor?: GuildConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GuildConfigs.
     */
    distinct?: GuildConfigScalarFieldEnum | GuildConfigScalarFieldEnum[]
  }

  /**
   * GuildConfig findFirstOrThrow
   */
  export type GuildConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * Filter, which GuildConfig to fetch.
     */
    where?: GuildConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildConfigs to fetch.
     */
    orderBy?: GuildConfigOrderByWithRelationInput | GuildConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GuildConfigs.
     */
    cursor?: GuildConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GuildConfigs.
     */
    distinct?: GuildConfigScalarFieldEnum | GuildConfigScalarFieldEnum[]
  }

  /**
   * GuildConfig findMany
   */
  export type GuildConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * Filter, which GuildConfigs to fetch.
     */
    where?: GuildConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildConfigs to fetch.
     */
    orderBy?: GuildConfigOrderByWithRelationInput | GuildConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GuildConfigs.
     */
    cursor?: GuildConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildConfigs.
     */
    skip?: number
    distinct?: GuildConfigScalarFieldEnum | GuildConfigScalarFieldEnum[]
  }

  /**
   * GuildConfig create
   */
  export type GuildConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * The data needed to create a GuildConfig.
     */
    data: XOR<GuildConfigCreateInput, GuildConfigUncheckedCreateInput>
  }

  /**
   * GuildConfig createMany
   */
  export type GuildConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GuildConfigs.
     */
    data: GuildConfigCreateManyInput | GuildConfigCreateManyInput[]
  }

  /**
   * GuildConfig createManyAndReturn
   */
  export type GuildConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * The data used to create many GuildConfigs.
     */
    data: GuildConfigCreateManyInput | GuildConfigCreateManyInput[]
  }

  /**
   * GuildConfig update
   */
  export type GuildConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * The data needed to update a GuildConfig.
     */
    data: XOR<GuildConfigUpdateInput, GuildConfigUncheckedUpdateInput>
    /**
     * Choose, which GuildConfig to update.
     */
    where: GuildConfigWhereUniqueInput
  }

  /**
   * GuildConfig updateMany
   */
  export type GuildConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GuildConfigs.
     */
    data: XOR<GuildConfigUpdateManyMutationInput, GuildConfigUncheckedUpdateManyInput>
    /**
     * Filter which GuildConfigs to update
     */
    where?: GuildConfigWhereInput
    /**
     * Limit how many GuildConfigs to update.
     */
    limit?: number
  }

  /**
   * GuildConfig updateManyAndReturn
   */
  export type GuildConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * The data used to update GuildConfigs.
     */
    data: XOR<GuildConfigUpdateManyMutationInput, GuildConfigUncheckedUpdateManyInput>
    /**
     * Filter which GuildConfigs to update
     */
    where?: GuildConfigWhereInput
    /**
     * Limit how many GuildConfigs to update.
     */
    limit?: number
  }

  /**
   * GuildConfig upsert
   */
  export type GuildConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * The filter to search for the GuildConfig to update in case it exists.
     */
    where: GuildConfigWhereUniqueInput
    /**
     * In case the GuildConfig found by the `where` argument doesn't exist, create a new GuildConfig with this data.
     */
    create: XOR<GuildConfigCreateInput, GuildConfigUncheckedCreateInput>
    /**
     * In case the GuildConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuildConfigUpdateInput, GuildConfigUncheckedUpdateInput>
  }

  /**
   * GuildConfig delete
   */
  export type GuildConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
    /**
     * Filter which GuildConfig to delete.
     */
    where: GuildConfigWhereUniqueInput
  }

  /**
   * GuildConfig deleteMany
   */
  export type GuildConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GuildConfigs to delete
     */
    where?: GuildConfigWhereInput
    /**
     * Limit how many GuildConfigs to delete.
     */
    limit?: number
  }

  /**
   * GuildConfig without action
   */
  export type GuildConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuildConfig
     */
    select?: GuildConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuildConfig
     */
    omit?: GuildConfigOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    robloxId: 'robloxId',
    xp: 'xp',
    raids: 'raids',
    defenses: 'defenses',
    scrims: 'scrims',
    trainings: 'trainings',
    suspendedUntil: 'suspendedUntil',
    unsuspendRank: 'unsuspendRank',
    isBanned: 'isBanned',
    lastRaid: 'lastRaid',
    lastDefense: 'lastDefense',
    lastScrim: 'lastScrim',
    lastTraining: 'lastTraining',
    lastActivity: 'lastActivity'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const XpLogScalarFieldEnum: {
    id: 'id',
    robloxId: 'robloxId',
    amount: 'amount',
    reason: 'reason',
    timestamp: 'timestamp'
  };

  export type XpLogScalarFieldEnum = (typeof XpLogScalarFieldEnum)[keyof typeof XpLogScalarFieldEnum]


  export const UserLinkScalarFieldEnum: {
    id: 'id',
    discordId: 'discordId',
    robloxId: 'robloxId',
    verifiedAt: 'verifiedAt'
  };

  export type UserLinkScalarFieldEnum = (typeof UserLinkScalarFieldEnum)[keyof typeof UserLinkScalarFieldEnum]


  export const RoleBindScalarFieldEnum: {
    id: 'id',
    guildId: 'guildId',
    discordRoleId: 'discordRoleId',
    minRankId: 'minRankId',
    maxRankId: 'maxRankId',
    robloxRankName: 'robloxRankName',
    rolesToRemoveJson: 'rolesToRemoveJson'
  };

  export type RoleBindScalarFieldEnum = (typeof RoleBindScalarFieldEnum)[keyof typeof RoleBindScalarFieldEnum]


  export const GuildConfigScalarFieldEnum: {
    id: 'id',
    guildId: 'guildId',
    nicknameFormat: 'nicknameFormat',
    verifiedRoleId: 'verifiedRoleId',
    autoUpdateEnabled: 'autoUpdateEnabled',
    verificationChannelId: 'verificationChannelId',
    verificationMessageId: 'verificationMessageId'
  };

  export type GuildConfigScalarFieldEnum = (typeof GuildConfigScalarFieldEnum)[keyof typeof GuildConfigScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    robloxId?: StringFilter<"User"> | string
    xp?: IntFilter<"User"> | number
    raids?: IntFilter<"User"> | number
    defenses?: IntFilter<"User"> | number
    scrims?: IntFilter<"User"> | number
    trainings?: IntFilter<"User"> | number
    suspendedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    unsuspendRank?: IntNullableFilter<"User"> | number | null
    isBanned?: BoolFilter<"User"> | boolean
    lastRaid?: DateTimeNullableFilter<"User"> | Date | string | null
    lastDefense?: DateTimeNullableFilter<"User"> | Date | string | null
    lastScrim?: DateTimeNullableFilter<"User"> | Date | string | null
    lastTraining?: DateTimeNullableFilter<"User"> | Date | string | null
    lastActivity?: DateTimeNullableFilter<"User"> | Date | string | null
    xpLogs?: XpLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    robloxId?: SortOrder
    xp?: SortOrder
    raids?: SortOrder
    defenses?: SortOrder
    scrims?: SortOrder
    trainings?: SortOrder
    suspendedUntil?: SortOrderInput | SortOrder
    unsuspendRank?: SortOrderInput | SortOrder
    isBanned?: SortOrder
    lastRaid?: SortOrderInput | SortOrder
    lastDefense?: SortOrderInput | SortOrder
    lastScrim?: SortOrderInput | SortOrder
    lastTraining?: SortOrderInput | SortOrder
    lastActivity?: SortOrderInput | SortOrder
    xpLogs?: XpLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    robloxId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    xp?: IntFilter<"User"> | number
    raids?: IntFilter<"User"> | number
    defenses?: IntFilter<"User"> | number
    scrims?: IntFilter<"User"> | number
    trainings?: IntFilter<"User"> | number
    suspendedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    unsuspendRank?: IntNullableFilter<"User"> | number | null
    isBanned?: BoolFilter<"User"> | boolean
    lastRaid?: DateTimeNullableFilter<"User"> | Date | string | null
    lastDefense?: DateTimeNullableFilter<"User"> | Date | string | null
    lastScrim?: DateTimeNullableFilter<"User"> | Date | string | null
    lastTraining?: DateTimeNullableFilter<"User"> | Date | string | null
    lastActivity?: DateTimeNullableFilter<"User"> | Date | string | null
    xpLogs?: XpLogListRelationFilter
  }, "id" | "robloxId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    robloxId?: SortOrder
    xp?: SortOrder
    raids?: SortOrder
    defenses?: SortOrder
    scrims?: SortOrder
    trainings?: SortOrder
    suspendedUntil?: SortOrderInput | SortOrder
    unsuspendRank?: SortOrderInput | SortOrder
    isBanned?: SortOrder
    lastRaid?: SortOrderInput | SortOrder
    lastDefense?: SortOrderInput | SortOrder
    lastScrim?: SortOrderInput | SortOrder
    lastTraining?: SortOrderInput | SortOrder
    lastActivity?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    robloxId?: StringWithAggregatesFilter<"User"> | string
    xp?: IntWithAggregatesFilter<"User"> | number
    raids?: IntWithAggregatesFilter<"User"> | number
    defenses?: IntWithAggregatesFilter<"User"> | number
    scrims?: IntWithAggregatesFilter<"User"> | number
    trainings?: IntWithAggregatesFilter<"User"> | number
    suspendedUntil?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    unsuspendRank?: IntNullableWithAggregatesFilter<"User"> | number | null
    isBanned?: BoolWithAggregatesFilter<"User"> | boolean
    lastRaid?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastDefense?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastScrim?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastTraining?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastActivity?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type XpLogWhereInput = {
    AND?: XpLogWhereInput | XpLogWhereInput[]
    OR?: XpLogWhereInput[]
    NOT?: XpLogWhereInput | XpLogWhereInput[]
    id?: StringFilter<"XpLog"> | string
    robloxId?: StringFilter<"XpLog"> | string
    amount?: IntFilter<"XpLog"> | number
    reason?: StringNullableFilter<"XpLog"> | string | null
    timestamp?: DateTimeFilter<"XpLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type XpLogOrderByWithRelationInput = {
    id?: SortOrder
    robloxId?: SortOrder
    amount?: SortOrder
    reason?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type XpLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: XpLogWhereInput | XpLogWhereInput[]
    OR?: XpLogWhereInput[]
    NOT?: XpLogWhereInput | XpLogWhereInput[]
    robloxId?: StringFilter<"XpLog"> | string
    amount?: IntFilter<"XpLog"> | number
    reason?: StringNullableFilter<"XpLog"> | string | null
    timestamp?: DateTimeFilter<"XpLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type XpLogOrderByWithAggregationInput = {
    id?: SortOrder
    robloxId?: SortOrder
    amount?: SortOrder
    reason?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: XpLogCountOrderByAggregateInput
    _avg?: XpLogAvgOrderByAggregateInput
    _max?: XpLogMaxOrderByAggregateInput
    _min?: XpLogMinOrderByAggregateInput
    _sum?: XpLogSumOrderByAggregateInput
  }

  export type XpLogScalarWhereWithAggregatesInput = {
    AND?: XpLogScalarWhereWithAggregatesInput | XpLogScalarWhereWithAggregatesInput[]
    OR?: XpLogScalarWhereWithAggregatesInput[]
    NOT?: XpLogScalarWhereWithAggregatesInput | XpLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"XpLog"> | string
    robloxId?: StringWithAggregatesFilter<"XpLog"> | string
    amount?: IntWithAggregatesFilter<"XpLog"> | number
    reason?: StringNullableWithAggregatesFilter<"XpLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"XpLog"> | Date | string
  }

  export type UserLinkWhereInput = {
    AND?: UserLinkWhereInput | UserLinkWhereInput[]
    OR?: UserLinkWhereInput[]
    NOT?: UserLinkWhereInput | UserLinkWhereInput[]
    id?: StringFilter<"UserLink"> | string
    discordId?: StringFilter<"UserLink"> | string
    robloxId?: StringFilter<"UserLink"> | string
    verifiedAt?: DateTimeFilter<"UserLink"> | Date | string
  }

  export type UserLinkOrderByWithRelationInput = {
    id?: SortOrder
    discordId?: SortOrder
    robloxId?: SortOrder
    verifiedAt?: SortOrder
  }

  export type UserLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    discordId?: string
    AND?: UserLinkWhereInput | UserLinkWhereInput[]
    OR?: UserLinkWhereInput[]
    NOT?: UserLinkWhereInput | UserLinkWhereInput[]
    robloxId?: StringFilter<"UserLink"> | string
    verifiedAt?: DateTimeFilter<"UserLink"> | Date | string
  }, "id" | "discordId">

  export type UserLinkOrderByWithAggregationInput = {
    id?: SortOrder
    discordId?: SortOrder
    robloxId?: SortOrder
    verifiedAt?: SortOrder
    _count?: UserLinkCountOrderByAggregateInput
    _max?: UserLinkMaxOrderByAggregateInput
    _min?: UserLinkMinOrderByAggregateInput
  }

  export type UserLinkScalarWhereWithAggregatesInput = {
    AND?: UserLinkScalarWhereWithAggregatesInput | UserLinkScalarWhereWithAggregatesInput[]
    OR?: UserLinkScalarWhereWithAggregatesInput[]
    NOT?: UserLinkScalarWhereWithAggregatesInput | UserLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserLink"> | string
    discordId?: StringWithAggregatesFilter<"UserLink"> | string
    robloxId?: StringWithAggregatesFilter<"UserLink"> | string
    verifiedAt?: DateTimeWithAggregatesFilter<"UserLink"> | Date | string
  }

  export type RoleBindWhereInput = {
    AND?: RoleBindWhereInput | RoleBindWhereInput[]
    OR?: RoleBindWhereInput[]
    NOT?: RoleBindWhereInput | RoleBindWhereInput[]
    id?: StringFilter<"RoleBind"> | string
    guildId?: StringFilter<"RoleBind"> | string
    discordRoleId?: StringFilter<"RoleBind"> | string
    minRankId?: IntFilter<"RoleBind"> | number
    maxRankId?: IntFilter<"RoleBind"> | number
    robloxRankName?: StringFilter<"RoleBind"> | string
    rolesToRemoveJson?: StringNullableFilter<"RoleBind"> | string | null
  }

  export type RoleBindOrderByWithRelationInput = {
    id?: SortOrder
    guildId?: SortOrder
    discordRoleId?: SortOrder
    minRankId?: SortOrder
    maxRankId?: SortOrder
    robloxRankName?: SortOrder
    rolesToRemoveJson?: SortOrderInput | SortOrder
  }

  export type RoleBindWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    guildId_discordRoleId?: RoleBindGuildIdDiscordRoleIdCompoundUniqueInput
    AND?: RoleBindWhereInput | RoleBindWhereInput[]
    OR?: RoleBindWhereInput[]
    NOT?: RoleBindWhereInput | RoleBindWhereInput[]
    guildId?: StringFilter<"RoleBind"> | string
    discordRoleId?: StringFilter<"RoleBind"> | string
    minRankId?: IntFilter<"RoleBind"> | number
    maxRankId?: IntFilter<"RoleBind"> | number
    robloxRankName?: StringFilter<"RoleBind"> | string
    rolesToRemoveJson?: StringNullableFilter<"RoleBind"> | string | null
  }, "id" | "guildId_discordRoleId">

  export type RoleBindOrderByWithAggregationInput = {
    id?: SortOrder
    guildId?: SortOrder
    discordRoleId?: SortOrder
    minRankId?: SortOrder
    maxRankId?: SortOrder
    robloxRankName?: SortOrder
    rolesToRemoveJson?: SortOrderInput | SortOrder
    _count?: RoleBindCountOrderByAggregateInput
    _avg?: RoleBindAvgOrderByAggregateInput
    _max?: RoleBindMaxOrderByAggregateInput
    _min?: RoleBindMinOrderByAggregateInput
    _sum?: RoleBindSumOrderByAggregateInput
  }

  export type RoleBindScalarWhereWithAggregatesInput = {
    AND?: RoleBindScalarWhereWithAggregatesInput | RoleBindScalarWhereWithAggregatesInput[]
    OR?: RoleBindScalarWhereWithAggregatesInput[]
    NOT?: RoleBindScalarWhereWithAggregatesInput | RoleBindScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoleBind"> | string
    guildId?: StringWithAggregatesFilter<"RoleBind"> | string
    discordRoleId?: StringWithAggregatesFilter<"RoleBind"> | string
    minRankId?: IntWithAggregatesFilter<"RoleBind"> | number
    maxRankId?: IntWithAggregatesFilter<"RoleBind"> | number
    robloxRankName?: StringWithAggregatesFilter<"RoleBind"> | string
    rolesToRemoveJson?: StringNullableWithAggregatesFilter<"RoleBind"> | string | null
  }

  export type GuildConfigWhereInput = {
    AND?: GuildConfigWhereInput | GuildConfigWhereInput[]
    OR?: GuildConfigWhereInput[]
    NOT?: GuildConfigWhereInput | GuildConfigWhereInput[]
    id?: StringFilter<"GuildConfig"> | string
    guildId?: StringFilter<"GuildConfig"> | string
    nicknameFormat?: StringFilter<"GuildConfig"> | string
    verifiedRoleId?: StringNullableFilter<"GuildConfig"> | string | null
    autoUpdateEnabled?: BoolFilter<"GuildConfig"> | boolean
    verificationChannelId?: StringNullableFilter<"GuildConfig"> | string | null
    verificationMessageId?: StringNullableFilter<"GuildConfig"> | string | null
  }

  export type GuildConfigOrderByWithRelationInput = {
    id?: SortOrder
    guildId?: SortOrder
    nicknameFormat?: SortOrder
    verifiedRoleId?: SortOrderInput | SortOrder
    autoUpdateEnabled?: SortOrder
    verificationChannelId?: SortOrderInput | SortOrder
    verificationMessageId?: SortOrderInput | SortOrder
  }

  export type GuildConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    guildId?: string
    AND?: GuildConfigWhereInput | GuildConfigWhereInput[]
    OR?: GuildConfigWhereInput[]
    NOT?: GuildConfigWhereInput | GuildConfigWhereInput[]
    nicknameFormat?: StringFilter<"GuildConfig"> | string
    verifiedRoleId?: StringNullableFilter<"GuildConfig"> | string | null
    autoUpdateEnabled?: BoolFilter<"GuildConfig"> | boolean
    verificationChannelId?: StringNullableFilter<"GuildConfig"> | string | null
    verificationMessageId?: StringNullableFilter<"GuildConfig"> | string | null
  }, "id" | "guildId">

  export type GuildConfigOrderByWithAggregationInput = {
    id?: SortOrder
    guildId?: SortOrder
    nicknameFormat?: SortOrder
    verifiedRoleId?: SortOrderInput | SortOrder
    autoUpdateEnabled?: SortOrder
    verificationChannelId?: SortOrderInput | SortOrder
    verificationMessageId?: SortOrderInput | SortOrder
    _count?: GuildConfigCountOrderByAggregateInput
    _max?: GuildConfigMaxOrderByAggregateInput
    _min?: GuildConfigMinOrderByAggregateInput
  }

  export type GuildConfigScalarWhereWithAggregatesInput = {
    AND?: GuildConfigScalarWhereWithAggregatesInput | GuildConfigScalarWhereWithAggregatesInput[]
    OR?: GuildConfigScalarWhereWithAggregatesInput[]
    NOT?: GuildConfigScalarWhereWithAggregatesInput | GuildConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GuildConfig"> | string
    guildId?: StringWithAggregatesFilter<"GuildConfig"> | string
    nicknameFormat?: StringWithAggregatesFilter<"GuildConfig"> | string
    verifiedRoleId?: StringNullableWithAggregatesFilter<"GuildConfig"> | string | null
    autoUpdateEnabled?: BoolWithAggregatesFilter<"GuildConfig"> | boolean
    verificationChannelId?: StringNullableWithAggregatesFilter<"GuildConfig"> | string | null
    verificationMessageId?: StringNullableWithAggregatesFilter<"GuildConfig"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    robloxId: string
    xp?: number
    raids?: number
    defenses?: number
    scrims?: number
    trainings?: number
    suspendedUntil?: Date | string | null
    unsuspendRank?: number | null
    isBanned?: boolean
    lastRaid?: Date | string | null
    lastDefense?: Date | string | null
    lastScrim?: Date | string | null
    lastTraining?: Date | string | null
    lastActivity?: Date | string | null
    xpLogs?: XpLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    robloxId: string
    xp?: number
    raids?: number
    defenses?: number
    scrims?: number
    trainings?: number
    suspendedUntil?: Date | string | null
    unsuspendRank?: number | null
    isBanned?: boolean
    lastRaid?: Date | string | null
    lastDefense?: Date | string | null
    lastScrim?: Date | string | null
    lastTraining?: Date | string | null
    lastActivity?: Date | string | null
    xpLogs?: XpLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    raids?: IntFieldUpdateOperationsInput | number
    defenses?: IntFieldUpdateOperationsInput | number
    scrims?: IntFieldUpdateOperationsInput | number
    trainings?: IntFieldUpdateOperationsInput | number
    suspendedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unsuspendRank?: NullableIntFieldUpdateOperationsInput | number | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    lastRaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDefense?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastScrim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    xpLogs?: XpLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    raids?: IntFieldUpdateOperationsInput | number
    defenses?: IntFieldUpdateOperationsInput | number
    scrims?: IntFieldUpdateOperationsInput | number
    trainings?: IntFieldUpdateOperationsInput | number
    suspendedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unsuspendRank?: NullableIntFieldUpdateOperationsInput | number | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    lastRaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDefense?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastScrim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    xpLogs?: XpLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    robloxId: string
    xp?: number
    raids?: number
    defenses?: number
    scrims?: number
    trainings?: number
    suspendedUntil?: Date | string | null
    unsuspendRank?: number | null
    isBanned?: boolean
    lastRaid?: Date | string | null
    lastDefense?: Date | string | null
    lastScrim?: Date | string | null
    lastTraining?: Date | string | null
    lastActivity?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    raids?: IntFieldUpdateOperationsInput | number
    defenses?: IntFieldUpdateOperationsInput | number
    scrims?: IntFieldUpdateOperationsInput | number
    trainings?: IntFieldUpdateOperationsInput | number
    suspendedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unsuspendRank?: NullableIntFieldUpdateOperationsInput | number | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    lastRaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDefense?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastScrim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    raids?: IntFieldUpdateOperationsInput | number
    defenses?: IntFieldUpdateOperationsInput | number
    scrims?: IntFieldUpdateOperationsInput | number
    trainings?: IntFieldUpdateOperationsInput | number
    suspendedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unsuspendRank?: NullableIntFieldUpdateOperationsInput | number | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    lastRaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDefense?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastScrim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type XpLogCreateInput = {
    id?: string
    amount: number
    reason?: string | null
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutXpLogsInput
  }

  export type XpLogUncheckedCreateInput = {
    id?: string
    robloxId: string
    amount: number
    reason?: string | null
    timestamp?: Date | string
  }

  export type XpLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutXpLogsNestedInput
  }

  export type XpLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XpLogCreateManyInput = {
    id?: string
    robloxId: string
    amount: number
    reason?: string | null
    timestamp?: Date | string
  }

  export type XpLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XpLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLinkCreateInput = {
    id?: string
    discordId: string
    robloxId: string
    verifiedAt?: Date | string
  }

  export type UserLinkUncheckedCreateInput = {
    id?: string
    discordId: string
    robloxId: string
    verifiedAt?: Date | string
  }

  export type UserLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLinkCreateManyInput = {
    id?: string
    discordId: string
    robloxId: string
    verifiedAt?: Date | string
  }

  export type UserLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordId?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleBindCreateInput = {
    id?: string
    guildId: string
    discordRoleId: string
    minRankId: number
    maxRankId: number
    robloxRankName: string
    rolesToRemoveJson?: string | null
  }

  export type RoleBindUncheckedCreateInput = {
    id?: string
    guildId: string
    discordRoleId: string
    minRankId: number
    maxRankId: number
    robloxRankName: string
    rolesToRemoveJson?: string | null
  }

  export type RoleBindUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    discordRoleId?: StringFieldUpdateOperationsInput | string
    minRankId?: IntFieldUpdateOperationsInput | number
    maxRankId?: IntFieldUpdateOperationsInput | number
    robloxRankName?: StringFieldUpdateOperationsInput | string
    rolesToRemoveJson?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleBindUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    discordRoleId?: StringFieldUpdateOperationsInput | string
    minRankId?: IntFieldUpdateOperationsInput | number
    maxRankId?: IntFieldUpdateOperationsInput | number
    robloxRankName?: StringFieldUpdateOperationsInput | string
    rolesToRemoveJson?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleBindCreateManyInput = {
    id?: string
    guildId: string
    discordRoleId: string
    minRankId: number
    maxRankId: number
    robloxRankName: string
    rolesToRemoveJson?: string | null
  }

  export type RoleBindUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    discordRoleId?: StringFieldUpdateOperationsInput | string
    minRankId?: IntFieldUpdateOperationsInput | number
    maxRankId?: IntFieldUpdateOperationsInput | number
    robloxRankName?: StringFieldUpdateOperationsInput | string
    rolesToRemoveJson?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleBindUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    discordRoleId?: StringFieldUpdateOperationsInput | string
    minRankId?: IntFieldUpdateOperationsInput | number
    maxRankId?: IntFieldUpdateOperationsInput | number
    robloxRankName?: StringFieldUpdateOperationsInput | string
    rolesToRemoveJson?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GuildConfigCreateInput = {
    id: string
    guildId: string
    nicknameFormat?: string
    verifiedRoleId?: string | null
    autoUpdateEnabled?: boolean
    verificationChannelId?: string | null
    verificationMessageId?: string | null
  }

  export type GuildConfigUncheckedCreateInput = {
    id: string
    guildId: string
    nicknameFormat?: string
    verifiedRoleId?: string | null
    autoUpdateEnabled?: boolean
    verificationChannelId?: string | null
    verificationMessageId?: string | null
  }

  export type GuildConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    nicknameFormat?: StringFieldUpdateOperationsInput | string
    verifiedRoleId?: NullableStringFieldUpdateOperationsInput | string | null
    autoUpdateEnabled?: BoolFieldUpdateOperationsInput | boolean
    verificationChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    verificationMessageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GuildConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    nicknameFormat?: StringFieldUpdateOperationsInput | string
    verifiedRoleId?: NullableStringFieldUpdateOperationsInput | string | null
    autoUpdateEnabled?: BoolFieldUpdateOperationsInput | boolean
    verificationChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    verificationMessageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GuildConfigCreateManyInput = {
    id: string
    guildId: string
    nicknameFormat?: string
    verifiedRoleId?: string | null
    autoUpdateEnabled?: boolean
    verificationChannelId?: string | null
    verificationMessageId?: string | null
  }

  export type GuildConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    nicknameFormat?: StringFieldUpdateOperationsInput | string
    verifiedRoleId?: NullableStringFieldUpdateOperationsInput | string | null
    autoUpdateEnabled?: BoolFieldUpdateOperationsInput | boolean
    verificationChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    verificationMessageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GuildConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    nicknameFormat?: StringFieldUpdateOperationsInput | string
    verifiedRoleId?: NullableStringFieldUpdateOperationsInput | string | null
    autoUpdateEnabled?: BoolFieldUpdateOperationsInput | boolean
    verificationChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    verificationMessageId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type XpLogListRelationFilter = {
    every?: XpLogWhereInput
    some?: XpLogWhereInput
    none?: XpLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type XpLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    robloxId?: SortOrder
    xp?: SortOrder
    raids?: SortOrder
    defenses?: SortOrder
    scrims?: SortOrder
    trainings?: SortOrder
    suspendedUntil?: SortOrder
    unsuspendRank?: SortOrder
    isBanned?: SortOrder
    lastRaid?: SortOrder
    lastDefense?: SortOrder
    lastScrim?: SortOrder
    lastTraining?: SortOrder
    lastActivity?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    xp?: SortOrder
    raids?: SortOrder
    defenses?: SortOrder
    scrims?: SortOrder
    trainings?: SortOrder
    unsuspendRank?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    robloxId?: SortOrder
    xp?: SortOrder
    raids?: SortOrder
    defenses?: SortOrder
    scrims?: SortOrder
    trainings?: SortOrder
    suspendedUntil?: SortOrder
    unsuspendRank?: SortOrder
    isBanned?: SortOrder
    lastRaid?: SortOrder
    lastDefense?: SortOrder
    lastScrim?: SortOrder
    lastTraining?: SortOrder
    lastActivity?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    robloxId?: SortOrder
    xp?: SortOrder
    raids?: SortOrder
    defenses?: SortOrder
    scrims?: SortOrder
    trainings?: SortOrder
    suspendedUntil?: SortOrder
    unsuspendRank?: SortOrder
    isBanned?: SortOrder
    lastRaid?: SortOrder
    lastDefense?: SortOrder
    lastScrim?: SortOrder
    lastTraining?: SortOrder
    lastActivity?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    xp?: SortOrder
    raids?: SortOrder
    defenses?: SortOrder
    scrims?: SortOrder
    trainings?: SortOrder
    unsuspendRank?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type XpLogCountOrderByAggregateInput = {
    id?: SortOrder
    robloxId?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
  }

  export type XpLogAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type XpLogMaxOrderByAggregateInput = {
    id?: SortOrder
    robloxId?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
  }

  export type XpLogMinOrderByAggregateInput = {
    id?: SortOrder
    robloxId?: SortOrder
    amount?: SortOrder
    reason?: SortOrder
    timestamp?: SortOrder
  }

  export type XpLogSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserLinkCountOrderByAggregateInput = {
    id?: SortOrder
    discordId?: SortOrder
    robloxId?: SortOrder
    verifiedAt?: SortOrder
  }

  export type UserLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    discordId?: SortOrder
    robloxId?: SortOrder
    verifiedAt?: SortOrder
  }

  export type UserLinkMinOrderByAggregateInput = {
    id?: SortOrder
    discordId?: SortOrder
    robloxId?: SortOrder
    verifiedAt?: SortOrder
  }

  export type RoleBindGuildIdDiscordRoleIdCompoundUniqueInput = {
    guildId: string
    discordRoleId: string
  }

  export type RoleBindCountOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    discordRoleId?: SortOrder
    minRankId?: SortOrder
    maxRankId?: SortOrder
    robloxRankName?: SortOrder
    rolesToRemoveJson?: SortOrder
  }

  export type RoleBindAvgOrderByAggregateInput = {
    minRankId?: SortOrder
    maxRankId?: SortOrder
  }

  export type RoleBindMaxOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    discordRoleId?: SortOrder
    minRankId?: SortOrder
    maxRankId?: SortOrder
    robloxRankName?: SortOrder
    rolesToRemoveJson?: SortOrder
  }

  export type RoleBindMinOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    discordRoleId?: SortOrder
    minRankId?: SortOrder
    maxRankId?: SortOrder
    robloxRankName?: SortOrder
    rolesToRemoveJson?: SortOrder
  }

  export type RoleBindSumOrderByAggregateInput = {
    minRankId?: SortOrder
    maxRankId?: SortOrder
  }

  export type GuildConfigCountOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    nicknameFormat?: SortOrder
    verifiedRoleId?: SortOrder
    autoUpdateEnabled?: SortOrder
    verificationChannelId?: SortOrder
    verificationMessageId?: SortOrder
  }

  export type GuildConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    nicknameFormat?: SortOrder
    verifiedRoleId?: SortOrder
    autoUpdateEnabled?: SortOrder
    verificationChannelId?: SortOrder
    verificationMessageId?: SortOrder
  }

  export type GuildConfigMinOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    nicknameFormat?: SortOrder
    verifiedRoleId?: SortOrder
    autoUpdateEnabled?: SortOrder
    verificationChannelId?: SortOrder
    verificationMessageId?: SortOrder
  }

  export type XpLogCreateNestedManyWithoutUserInput = {
    create?: XOR<XpLogCreateWithoutUserInput, XpLogUncheckedCreateWithoutUserInput> | XpLogCreateWithoutUserInput[] | XpLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XpLogCreateOrConnectWithoutUserInput | XpLogCreateOrConnectWithoutUserInput[]
    createMany?: XpLogCreateManyUserInputEnvelope
    connect?: XpLogWhereUniqueInput | XpLogWhereUniqueInput[]
  }

  export type XpLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<XpLogCreateWithoutUserInput, XpLogUncheckedCreateWithoutUserInput> | XpLogCreateWithoutUserInput[] | XpLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XpLogCreateOrConnectWithoutUserInput | XpLogCreateOrConnectWithoutUserInput[]
    createMany?: XpLogCreateManyUserInputEnvelope
    connect?: XpLogWhereUniqueInput | XpLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type XpLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<XpLogCreateWithoutUserInput, XpLogUncheckedCreateWithoutUserInput> | XpLogCreateWithoutUserInput[] | XpLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XpLogCreateOrConnectWithoutUserInput | XpLogCreateOrConnectWithoutUserInput[]
    upsert?: XpLogUpsertWithWhereUniqueWithoutUserInput | XpLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: XpLogCreateManyUserInputEnvelope
    set?: XpLogWhereUniqueInput | XpLogWhereUniqueInput[]
    disconnect?: XpLogWhereUniqueInput | XpLogWhereUniqueInput[]
    delete?: XpLogWhereUniqueInput | XpLogWhereUniqueInput[]
    connect?: XpLogWhereUniqueInput | XpLogWhereUniqueInput[]
    update?: XpLogUpdateWithWhereUniqueWithoutUserInput | XpLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: XpLogUpdateManyWithWhereWithoutUserInput | XpLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: XpLogScalarWhereInput | XpLogScalarWhereInput[]
  }

  export type XpLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<XpLogCreateWithoutUserInput, XpLogUncheckedCreateWithoutUserInput> | XpLogCreateWithoutUserInput[] | XpLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: XpLogCreateOrConnectWithoutUserInput | XpLogCreateOrConnectWithoutUserInput[]
    upsert?: XpLogUpsertWithWhereUniqueWithoutUserInput | XpLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: XpLogCreateManyUserInputEnvelope
    set?: XpLogWhereUniqueInput | XpLogWhereUniqueInput[]
    disconnect?: XpLogWhereUniqueInput | XpLogWhereUniqueInput[]
    delete?: XpLogWhereUniqueInput | XpLogWhereUniqueInput[]
    connect?: XpLogWhereUniqueInput | XpLogWhereUniqueInput[]
    update?: XpLogUpdateWithWhereUniqueWithoutUserInput | XpLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: XpLogUpdateManyWithWhereWithoutUserInput | XpLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: XpLogScalarWhereInput | XpLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutXpLogsInput = {
    create?: XOR<UserCreateWithoutXpLogsInput, UserUncheckedCreateWithoutXpLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutXpLogsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutXpLogsNestedInput = {
    create?: XOR<UserCreateWithoutXpLogsInput, UserUncheckedCreateWithoutXpLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutXpLogsInput
    upsert?: UserUpsertWithoutXpLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutXpLogsInput, UserUpdateWithoutXpLogsInput>, UserUncheckedUpdateWithoutXpLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type XpLogCreateWithoutUserInput = {
    id?: string
    amount: number
    reason?: string | null
    timestamp?: Date | string
  }

  export type XpLogUncheckedCreateWithoutUserInput = {
    id?: string
    amount: number
    reason?: string | null
    timestamp?: Date | string
  }

  export type XpLogCreateOrConnectWithoutUserInput = {
    where: XpLogWhereUniqueInput
    create: XOR<XpLogCreateWithoutUserInput, XpLogUncheckedCreateWithoutUserInput>
  }

  export type XpLogCreateManyUserInputEnvelope = {
    data: XpLogCreateManyUserInput | XpLogCreateManyUserInput[]
  }

  export type XpLogUpsertWithWhereUniqueWithoutUserInput = {
    where: XpLogWhereUniqueInput
    update: XOR<XpLogUpdateWithoutUserInput, XpLogUncheckedUpdateWithoutUserInput>
    create: XOR<XpLogCreateWithoutUserInput, XpLogUncheckedCreateWithoutUserInput>
  }

  export type XpLogUpdateWithWhereUniqueWithoutUserInput = {
    where: XpLogWhereUniqueInput
    data: XOR<XpLogUpdateWithoutUserInput, XpLogUncheckedUpdateWithoutUserInput>
  }

  export type XpLogUpdateManyWithWhereWithoutUserInput = {
    where: XpLogScalarWhereInput
    data: XOR<XpLogUpdateManyMutationInput, XpLogUncheckedUpdateManyWithoutUserInput>
  }

  export type XpLogScalarWhereInput = {
    AND?: XpLogScalarWhereInput | XpLogScalarWhereInput[]
    OR?: XpLogScalarWhereInput[]
    NOT?: XpLogScalarWhereInput | XpLogScalarWhereInput[]
    id?: StringFilter<"XpLog"> | string
    robloxId?: StringFilter<"XpLog"> | string
    amount?: IntFilter<"XpLog"> | number
    reason?: StringNullableFilter<"XpLog"> | string | null
    timestamp?: DateTimeFilter<"XpLog"> | Date | string
  }

  export type UserCreateWithoutXpLogsInput = {
    id?: string
    robloxId: string
    xp?: number
    raids?: number
    defenses?: number
    scrims?: number
    trainings?: number
    suspendedUntil?: Date | string | null
    unsuspendRank?: number | null
    isBanned?: boolean
    lastRaid?: Date | string | null
    lastDefense?: Date | string | null
    lastScrim?: Date | string | null
    lastTraining?: Date | string | null
    lastActivity?: Date | string | null
  }

  export type UserUncheckedCreateWithoutXpLogsInput = {
    id?: string
    robloxId: string
    xp?: number
    raids?: number
    defenses?: number
    scrims?: number
    trainings?: number
    suspendedUntil?: Date | string | null
    unsuspendRank?: number | null
    isBanned?: boolean
    lastRaid?: Date | string | null
    lastDefense?: Date | string | null
    lastScrim?: Date | string | null
    lastTraining?: Date | string | null
    lastActivity?: Date | string | null
  }

  export type UserCreateOrConnectWithoutXpLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutXpLogsInput, UserUncheckedCreateWithoutXpLogsInput>
  }

  export type UserUpsertWithoutXpLogsInput = {
    update: XOR<UserUpdateWithoutXpLogsInput, UserUncheckedUpdateWithoutXpLogsInput>
    create: XOR<UserCreateWithoutXpLogsInput, UserUncheckedCreateWithoutXpLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutXpLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutXpLogsInput, UserUncheckedUpdateWithoutXpLogsInput>
  }

  export type UserUpdateWithoutXpLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    raids?: IntFieldUpdateOperationsInput | number
    defenses?: IntFieldUpdateOperationsInput | number
    scrims?: IntFieldUpdateOperationsInput | number
    trainings?: IntFieldUpdateOperationsInput | number
    suspendedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unsuspendRank?: NullableIntFieldUpdateOperationsInput | number | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    lastRaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDefense?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastScrim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateWithoutXpLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    robloxId?: StringFieldUpdateOperationsInput | string
    xp?: IntFieldUpdateOperationsInput | number
    raids?: IntFieldUpdateOperationsInput | number
    defenses?: IntFieldUpdateOperationsInput | number
    scrims?: IntFieldUpdateOperationsInput | number
    trainings?: IntFieldUpdateOperationsInput | number
    suspendedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unsuspendRank?: NullableIntFieldUpdateOperationsInput | number | null
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    lastRaid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDefense?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastScrim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type XpLogCreateManyUserInput = {
    id?: string
    amount: number
    reason?: string | null
    timestamp?: Date | string
  }

  export type XpLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XpLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XpLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}