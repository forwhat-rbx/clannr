import { discordClient, robloxClient, robloxGroup } from '../../main';
import { CommandContext } from '../../structures/addons/CommandAddons';
import Command from '../../structures/Command';
import { PartialUser, User, GroupMember } from 'bloxy/dist/structures';
import { getLinkedRobloxUser } from '../../handlers/accountLinks';
import { config } from '../../config';
import { AttachmentBuilder } from 'discord.js';
import { provider } from '../../database';
import { createCanvas, loadImage, registerFont, Canvas, CanvasRenderingContext2D as NodeCanvasRenderingContext2D } from 'canvas';

// Register custom fonts (ensure these files exist in your assets folder)
try {
  registerFont('./assets/fonts/Exo2-Bold.ttf', { family: 'Exo2', weight: 'bold' });
  registerFont('./assets/fonts/Exo2-Regular.ttf', { family: 'Exo2' });
  registerFont('./assets/fonts/Orbitron-Bold.ttf', { family: 'Orbitron', weight: 'bold' });
} catch (err) {
  console.warn('Could not register custom fonts, falling back to system fonts', err);
}

// Helper function for drawing rounded rectangles
function roundedRect(ctx: NodeCanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number) {
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.lineTo(x + width - radius, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
  ctx.lineTo(x + width, y + height - radius);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
  ctx.lineTo(x + radius, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
  ctx.lineTo(x, y + radius);
  ctx.quadraticCurveTo(x, y, x + radius, y);
  ctx.closePath();
}

// Helper function to draw a star (used for high-rank decoration)
function drawStar(ctx: NodeCanvasRenderingContext2D, cx: number, cy: number, outerRadius: number, innerRadius: number, color: string) {
  let rot = Math.PI / 2 * 3;
  let step = Math.PI / 5;
  
  ctx.beginPath();
  ctx.moveTo(cx, cy - outerRadius);
  for (let i = 0; i < 5; i++) {
    let x = cx + Math.cos(rot) * outerRadius;
    let y = cy + Math.sin(rot) * outerRadius;
    ctx.lineTo(x, y);
    rot += step;
    x = cx + Math.cos(rot) * innerRadius;
    y = cy + Math.sin(rot) * innerRadius;
    ctx.lineTo(x, y);
    rot += step;
  }
  ctx.fillStyle = color;
  ctx.fill();
}

// Generate a stunning XP composite image with advanced styling
const generateCompositeImage = async (
    backgroundUrl: string,
    userName: string,
    userRank: string,
    currentXP: number,
    nextXP: number | null,
    avatarUrl: string,
    attendance: {
        raids: number;
        defenses: number;
        scrims: number;
        trainings: number;
    }
) => {
    const width = 1000;
    const height = 400;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    // Load and draw main background
    let background;
    try {
        background = await loadImage(backgroundUrl);
    } catch (error) {
        console.error(`Failed to load background image: ${backgroundUrl}`, error);
        // Fallback: create a futuristic gradient background
        background = createCanvas(width, height);
        const fallbackCtx = background.getContext('2d');
        const gradient = fallbackCtx.createLinearGradient(0, 0, width, height);
        gradient.addColorStop(0, '#1a0000');
        gradient.addColorStop(0.5, '#300000');
        gradient.addColorStop(1, '#200000');
        fallbackCtx.fillStyle = gradient;
        fallbackCtx.fillRect(0, 0, width, height);
    }
    ctx.drawImage(background, 0, 0, width, height);
    
    // Add a semi-transparent dark overlay for readability
    ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';
    ctx.fillRect(0, 0, width, height);

    // Create a glassmorphism card effect
    const cardX = 40;
    const cardY = 40;
    const cardWidth = width - 80;
    const cardHeight = height - 80;
    
    ctx.save();
    ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';
    ctx.shadowBlur = 15;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 5;
    ctx.fillStyle = 'rgba(20, 0, 0, 0.5)';
    roundedRect(ctx, cardX, cardY, cardWidth, cardHeight, 20);
    ctx.fill();
    ctx.strokeStyle = '#ff3030';
    ctx.lineWidth = 2;
    roundedRect(ctx, cardX, cardY, cardWidth, cardHeight, 20);
    ctx.stroke();
    ctx.restore();

    // Add subtle pattern overlay
    ctx.save();
    ctx.globalAlpha = 0.05;
    for (let i = 0; i < width; i += 20) {
        ctx.beginPath();
        ctx.moveTo(i, 0);
        ctx.lineTo(i, height);
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 0.5;
        ctx.stroke();
    }
    for (let i = 0; i < height; i += 20) {
        ctx.beginPath();
        ctx.moveTo(0, i);
        ctx.lineTo(width, i);
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 0.5;
        ctx.stroke();
    }
    ctx.restore();

    // LAYOUT ADJUSTMENTS - New positioning with 40px upward shift
    const avatarSize = 120;
    const avatarX = cardX + 60;
    const avatarY = cardY + 50; // Shifted up by ~40px (2 grid squares)

    // Load and draw avatar with advanced effects
    let avatar;
    try {
        avatar = await loadImage(avatarUrl);
    } catch (error) {
        console.error(`Failed to load avatar image: ${avatarUrl}`, error);
        avatar = createCanvas(128, 128);
        const fallbackCtx = avatar.getContext('2d');
        fallbackCtx.fillStyle = '#800000';
        fallbackCtx.fillRect(0, 0, 128, 128);
    }

    ctx.save();
    // Outer glow
    const glowSize = 15;
    const gradient = ctx.createRadialGradient(
        avatarX + avatarSize/2, avatarY + avatarSize/2, avatarSize/2,
        avatarX + avatarSize/2, avatarY + avatarSize/2, avatarSize/2 + glowSize
    );
    gradient.addColorStop(0, '#ff0000');
    gradient.addColorStop(1, 'rgba(255, 0, 0, 0)');
    ctx.beginPath();
    ctx.arc(avatarX + avatarSize/2, avatarY + avatarSize/2, avatarSize/2 + glowSize, 0, Math.PI * 2);
    ctx.fillStyle = gradient;
    ctx.fill();
    
    // Avatar borders
    ctx.beginPath();
    ctx.arc(avatarX + avatarSize/2, avatarY + avatarSize/2, avatarSize/2 + 4, 0, Math.PI * 2);
    ctx.strokeStyle = '#ff3030';
    ctx.lineWidth = 4;
    ctx.stroke();
    ctx.beginPath();
    ctx.arc(avatarX + avatarSize/2, avatarY + avatarSize/2, avatarSize/2 + 1, 0, Math.PI * 2);
    ctx.strokeStyle = '#ffffff';
    ctx.lineWidth = 2;
    ctx.stroke();
    
    // Decorative circle segments
    for (let i = 0; i < 12; i++) {
        ctx.beginPath();
        ctx.arc(
            avatarX + avatarSize/2, 
            avatarY + avatarSize/2, 
            avatarSize/2 + 8,
            (i * Math.PI/6) - 0.1,
            (i * Math.PI/6) + 0.1
        );
        ctx.strokeStyle = i % 3 === 0 ? '#ff5050' : '#800000';
        ctx.lineWidth = 3;
        ctx.stroke();
    }
    
    // Draw avatar image clipped as a circle
    ctx.beginPath();
    ctx.arc(avatarX + avatarSize/2, avatarY + avatarSize/2, avatarSize/2, 0, Math.PI * 2);
    ctx.closePath();
    ctx.clip();
    ctx.drawImage(avatar, avatarX, avatarY, avatarSize, avatarSize);
    ctx.restore();

    // Determine rank level for decorative stars
    const rankLevel = userRank.toLowerCase().includes('commander') ? 5 :
                     userRank.toLowerCase().includes('officer') ? 4 :
                     userRank.toLowerCase().includes('captain') ? 3 :
                     userRank.toLowerCase().includes('sergeant') ? 2 : 1;

    // Username and rank positioning - adjusted to align with repositioned avatar
    const nameX = avatarX + avatarSize + 40;
    const nameY = avatarY + 45; // Adjusted to center with avatar

    // Draw username with gradient and drop shadow
    ctx.save();
    ctx.font = `bold 42px Orbitron, Arial`;
    ctx.fillStyle = 'rgba(139, 0, 0, 0.7)';
    ctx.fillText(userName, nameX + 2, nameY + 2);
    const textGradient = ctx.createLinearGradient(nameX, nameY - 40, nameX, nameY);
    textGradient.addColorStop(0, '#ffffff');
    textGradient.addColorStop(1, '#ff3030');
    ctx.fillStyle = textGradient;
    ctx.fillText(userName, nameX, nameY);
    if (rankLevel > 2) {
        // Draw stars for higher ranks
        for (let i = 0; i < rankLevel - 2; i++) {
            drawStar(ctx, nameX + ctx.measureText(userName).width + 20 + (i * 25), nameY - 15, 10, 5, '#ffcc00');
        }
    }
    ctx.restore();

    // Draw rank badge with custom styling
    ctx.save();
    ctx.font = `28px Exo2, Arial`;
    const rankText = `Rank: ${userRank}`;
    const rankWidth = ctx.measureText(rankText).width + 20;
    const rankX = nameX;
    const rankY = nameY + 20;
    const rankBgGradient = ctx.createLinearGradient(rankX, rankY, rankX + rankWidth, rankY);
    rankBgGradient.addColorStop(0, '#600000');
    rankBgGradient.addColorStop(1, '#300000');
    ctx.fillStyle = rankBgGradient;
    roundedRect(ctx, rankX, rankY, rankWidth, 36, 8);
    ctx.fill();
    ctx.fillStyle = '#ffffff';
    ctx.fillText(rankText, rankX + 10, rankY + 28);
    ctx.restore();

    // Draw progress bar - positioned below avatar with spacing
    const progressBarWidth = cardWidth - 120;
    const progressBarHeight = 30;
    const progressX = cardX + 60;
    const progressY = avatarY + avatarSize + 30; // Positioned relative to avatar
    const progress = nextXP ? Math.min(currentXP / nextXP, 1) : 1;
    const filledWidth = progress * progressBarWidth;

    ctx.save();
    ctx.shadowColor = 'rgba(255, 0, 0, 0.5)';
    ctx.shadowBlur = 10;
    ctx.fillStyle = 'rgba(30, 0, 0, 0.8)';
    roundedRect(ctx, progressX, progressY, progressBarWidth, progressBarHeight, 10);
    ctx.fill();
    const progressGradient = ctx.createLinearGradient(progressX, progressY, progressX + progressBarWidth, progressY);
    progressGradient.addColorStop(0, '#8B0000');
    progressGradient.addColorStop(0.4, '#FF0000');
    progressGradient.addColorStop(0.6, '#FF3333');
    progressGradient.addColorStop(1, '#FF6666');
    ctx.fillStyle = progressGradient;
    if (filledWidth > 0) {
        roundedRect(ctx, progressX, progressY, filledWidth, progressBarHeight, 10);
        ctx.fill();
    }
    
    // Bar segments - thinner and more subtle
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
    ctx.lineWidth = 0.5;
    for (let i = 1; i < 10; i++) {
        const segX = progressX + (progressBarWidth / 10) * i;
        ctx.beginPath();
        ctx.moveTo(segX, progressY);
        ctx.lineTo(segX, progressY + progressBarHeight);
        ctx.stroke();
    }
    
    // XP text positioned in center of progress bar
    ctx.font = 'bold 16px Orbitron, Arial';
    ctx.textAlign = 'center';
    ctx.fillStyle = '#ffffff';
    ctx.fillText(
        `XP: ${currentXP} / ${nextXP ?? 'MAX'}`,
        progressX + progressBarWidth / 2,
        progressY + progressBarHeight / 2 + 6
    );
    
    // Indicator dots moved to top edge to not overlap with text
    for (let i = 0.2; i <= 0.8; i += 0.2) {
        const dotX = progressX + (progressBarWidth * i);
        const dotY = progressY + 5; // Top position instead of bottom
        const isActive = progress >= i;
        ctx.beginPath();
        ctx.arc(dotX, dotY, 2, 0, Math.PI * 2); // Even smaller dots
        ctx.fillStyle = isActive ? '#ffffff' : 'rgba(255, 255, 255, 0.3)';
        ctx.fill();
        if (isActive) {
            ctx.beginPath();
            ctx.arc(dotX, dotY, 4, 0, Math.PI * 2); // Smaller glow
            ctx.strokeStyle = '#ffffff';
            ctx.lineWidth = 0.5;
            ctx.stroke();
        }
    }
    ctx.restore();

    // Draw attendance statistics with tech-inspired styling
    ctx.save();
    const statsStartY = progressY + progressBarHeight + 25; // Positioned below progress bar
    const statsEndY = cardY + cardHeight - 25; // Leave margin at bottom
    const statsHeight = statsEndY - statsStartY; // Available height for stats
    
    const statItemWidth = (cardWidth - 120) / 4; // 4 items in a row
    const statItemHeight = Math.min(45, statsHeight - 20); // Smaller height, but ensure it fits
    
    // Header for stats section
    ctx.font = 'bold 16px Exo2, Arial';
    ctx.fillStyle = '#aaaaaa';
    ctx.textAlign = 'center';
    ctx.fillText('COMBAT STATISTICS', cardX + cardWidth/2, statsStartY - 5);
    ctx.strokeStyle = '#ff3030';
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(cardX + 60, statsStartY);
    ctx.lineTo(cardX + cardWidth - 60, statsStartY);
    ctx.stroke();
    
    // Stats items without icons
    const statsItems = [
        { label: 'RAIDS', value: attendance.raids },
        { label: 'DEFENSES', value: attendance.defenses },
        { label: 'SCRIMS', value: attendance.scrims },
        { label: 'TRAININGS', value: attendance.trainings }
    ];
    
    // Center the stats within the available space
    const totalStatsWidth = statsItems.length * statItemWidth;
    const statsStartX = cardX + (cardWidth - totalStatsWidth) / 2;
    
    statsItems.forEach((item, index) => {
        const statX = statsStartX + index * statItemWidth;
        const statY = statsStartY + 10; // Fixed Y position
        
        // Stat background
        ctx.fillStyle = 'rgba(20, 0, 0, 0.6)';
        roundedRect(ctx, statX, statY, statItemWidth - 10, statItemHeight, 8);
        ctx.fill();
        
        // Stat border
        const borderGradient = ctx.createLinearGradient(statX, statY, statX, statY + statItemHeight);
        borderGradient.addColorStop(0, '#ff3030');
        borderGradient.addColorStop(1, '#800000');
        ctx.strokeStyle = borderGradient;
        ctx.lineWidth = 1;
        roundedRect(ctx, statX, statY, statItemWidth - 10, statItemHeight, 8);
        ctx.stroke();
        
        // Stat label - centered
        ctx.fillStyle = '#aaaaaa';
        ctx.font = '12px Exo2, Arial';
        ctx.textAlign = 'center'; // Center-aligned text
        ctx.fillText(item.label, statX + (statItemWidth - 10) / 2, statY + 18);
        
        // Stat value - centered
        ctx.fillStyle = '#ffffff';
        ctx.font = 'bold 20px Orbitron, Arial';
        ctx.textAlign = 'center';
        ctx.fillText(`${item.value}`, statX + (statItemWidth - 10) / 2, statY + 40);
    });
    ctx.restore();

    return canvas.toBuffer();
};

// Function from the old code to determine the next XP requirement based on group member rank
function getNextXpRequirement(member: GroupMember, userXp: number) {
    const xpRoles = config.xpSystem.roles
        .slice()
        .sort((a, b) => a.xp - b.xp);
    
    // Special handling for rank 2 (first rank)
    if (member.role.rank === 2) {
        return xpRoles[0].xp;
    }
    
    const currentIndex = xpRoles.findIndex(r => r.rank === member.role.rank);
    console.log('Current index:', currentIndex);
    
    if (currentIndex === -1) {
        console.log('Rank not found');
        return null;
    }
    
    if (currentIndex === xpRoles.length - 1) {
        console.log('At max rank');
        return null;
    }
    
    const nextXp = xpRoles[currentIndex + 1].xp;
    console.log('Next XP requirement:', nextXp);
    return nextXp;
}

class XPCommand extends Command {
    constructor() {
        super({
            trigger: 'xp',
            description: 'Displays XP and attendance information',
            type: 'ChatInput',
            module: 'xp',
            args: [
                {
                    trigger: 'roblox-user',
                    description: 'Who do you want to check XP for?',
                    required: false,
                    type: 'String',
                }
            ]
        });
    }

    async run(ctx: CommandContext) {
        let robloxUser: User | PartialUser;

        // Attempt robust user lookup
        try {
            if (ctx.args['roblox-user']) {
                robloxUser = await robloxClient.getUser(Number(ctx.args['roblox-user']));
                if (!robloxUser) throw new Error();
            } else {
                robloxUser = await getLinkedRobloxUser(ctx.user.id);
            }
            if (!robloxUser) throw new Error();
        } catch {
            try {
                const robloxUsers = await robloxClient.getUsersByUsernames([
                    ctx.args['roblox-user'] as string,
                ]);
                if (robloxUsers.length === 0) throw new Error();
                robloxUser = robloxUsers[0];
            } catch {
                try {
                    const idQuery = (ctx.args['roblox-user'] as string).replace(/[^0-9]/gm, '');
                    const discordUser = await discordClient.users.fetch(idQuery);
                    const linkedUser = await getLinkedRobloxUser(discordUser.id);
                    if (!linkedUser) throw new Error();
                    robloxUser = linkedUser;
                } catch {
                    return ctx.reply({
                        content: 'The specified Roblox user could not be found.',
                        ephemeral: true,
                    });
                }
            }
        }

        // Retrieve user data
        const userData = await provider.findUser(robloxUser.id.toString());
        if (!userData) {
            return ctx.reply({
                content: 'User data not found. They might not have any XP logged yet.',
                ephemeral: true,
            });
        }

        let robloxMember: GroupMember;
        try {
            robloxMember = await robloxGroup.getMember(robloxUser.id);
            if (!robloxMember) throw new Error('User is not a group member.');
        } catch {
            return ctx.reply({
                content: 'The user is not a member of the group.',
                ephemeral: true,
            });
        }

        // Determine next rank XP requirement using the merged function
        const nextXp = getNextXpRequirement(robloxMember, userData.xp);

        // Fetch user avatar URL
        const avatarUrl = await robloxClient.apis.thumbnailsAPI
            .getUsersAvatarHeadShotImages({
                userIds: [robloxUser.id],
                size: '150x150',
                format: 'png',
            })
            .then((res) => res.data[0]?.imageUrl || 'https://www.roblox.com/images/default-headshot.png');

        // Generate composite image
        const backgroundUrl = 'https://i.ibb.co/64dZMPQ/SOH-BACK.png';
        let compositeImage: Buffer | null = null;

        try {
            compositeImage = await generateCompositeImage(
                backgroundUrl,
                robloxUser.name,
                robloxMember.role.name,
                userData.xp,
                nextXp,
                avatarUrl,
                {
                    raids: userData.raids ?? 0,
                    defenses: userData.defenses ?? 0,
                    scrims: userData.scrims ?? 0,
                    trainings: userData.trainings ?? 0
                }
            );
        } catch (err) {
            console.error('Failed to generate composite image:', err);
        }

        if (!compositeImage) {
            return ctx.reply({
                content: 'There was an error generating the XP image. Please try again later.',
                ephemeral: true,
            });
        }

        const imageAttachment = new AttachmentBuilder(compositeImage, { name: 'xp-progress.png' });

        return ctx.reply({
            files: [imageAttachment]
        });
    }
}

export default XPCommand;